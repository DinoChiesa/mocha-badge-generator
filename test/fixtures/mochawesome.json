{
  "stats": {
    "suites": 10,
    "tests": 100,
    "passes": 95,
    "pending": 0,
    "failures": 5,
    "start": "2020-04-02T09:06:17.008Z",
    "end": "2020-04-02T09:06:17.008Z",
    "duration": 1005755,
    "testsRegistered": 100,
    "passPercent": 95,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "53599627-e032-444e-99ac-49e1e8b21453",
      "title": "",
      "fullFile": "cypress/integration/404.js",
      "file": "cypress/integration/404.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fc76c8ec-23be-41a5-a2a0-9cbd087ff93d",
          "title": "404",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Bad page",
              "fullTitle": "404 Bad page",
              "timedOut": null,
              "duration": 759,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/bad-page', {\n  failOnStatusCode: false\n});\ncy.get('[data-name=four04]').contains('the page or resource you are searching for is currently unavailable');",
              "err": {},
              "uuid": "1fdc47d3-acba-427b-9dc7-4f69af587118",
              "parentUUID": "fc76c8ec-23be-41a5-a2a0-9cbd087ff93d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "404 has no detectable a11y violations on load",
              "fullTitle": "404 404 has no detectable a11y violations on load",
              "timedOut": null,
              "duration": 640,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitURLAndCheckAccessibility('/', {\n  failOnStatusCode: false\n});",
              "err": {},
              "uuid": "070c143e-6ad2-4dca-8751-d31261172027",
              "parentUUID": "fc76c8ec-23be-41a5-a2a0-9cbd087ff93d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1fdc47d3-acba-427b-9dc7-4f69af587118",
            "070c143e-6ad2-4dca-8751-d31261172027"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1399,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "62c64cc6-e7ef-4eb7-9224-2fa3a00b2e49",
      "title": "",
      "fullFile": "cypress/integration/activation.js",
      "file": "cypress/integration/activation.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c7ce3a8a-f2bf-4549-b839-30fd0a9e0857",
          "title": "Activation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Visit Activation (Missing code)",
              "fullTitle": "Activation Visit Activation (Missing code)",
              "timedOut": null,
              "duration": 1540,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/activation', {\n  failOnStatusCode: false\n});\ncy.get('[data-name=modal-alert] [data-name=modal-body] p', {\n  timeout: 10000\n}).contains('Activation code required');\ncy.get('[data-name=ok]').click();\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/');",
              "err": {},
              "uuid": "eb9274ab-4f08-4601-ba48-6570881058dc",
              "parentUUID": "c7ce3a8a-f2bf-4549-b839-30fd0a9e0857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Activation (Missing code) has no detectable a11y violations on load",
              "fullTitle": "Activation Visit Activation (Missing code) has no detectable a11y violations on load",
              "timedOut": null,
              "duration": 351,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitURLAndCheckAccessibility('/activation', {\n  failOnStatusCode: false\n});",
              "err": {},
              "uuid": "16b34860-f94f-46eb-b14b-408fefdfdc04",
              "parentUUID": "c7ce3a8a-f2bf-4549-b839-30fd0a9e0857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Activation (Bad code)",
              "fullTitle": "Activation Visit Activation (Bad code)",
              "timedOut": null,
              "duration": 935,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/activation?c=00001', {\n  failOnStatusCode: false\n});\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('The activation code provided was invalid.');\ncy.get('[data-name=ok]').click();\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/');",
              "err": {},
              "uuid": "3ad65c56-3534-4e37-9899-209644497faf",
              "parentUUID": "c7ce3a8a-f2bf-4549-b839-30fd0a9e0857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Activation (Bad code) has no detectable a11y violations on load",
              "fullTitle": "Activation Visit Activation (Bad code) has no detectable a11y violations on load",
              "timedOut": null,
              "duration": 453,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitURLAndCheckAccessibility('/activation?c=00001', {\n  failOnStatusCode: false\n});",
              "err": {},
              "uuid": "ad9afb92-9ca2-426b-a728-8d4e6774c418",
              "parentUUID": "c7ce3a8a-f2bf-4549-b839-30fd0a9e0857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Activation (Success)",
              "fullTitle": "Activation Visit Activation (Success)",
              "timedOut": null,
              "duration": 1215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('deleteAllAccounts');\ncy.task('addExtraNonActivatedAccount');\nvar activCode; // Cypress won't run the tests with an `await` here\n// eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('addNonActivatedAccount').then(function (_ref) {\n  var activationCode = _ref.activationCode;\n  activCode = activationCode;\n  return cy.task('getRecords'); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (accts) {\n  expect(accts).to.have.lengthOf(2);\n  cy.visit('/activation?c=' + activCode);\n  cy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('Your account has been activated.');\n  cy.get('[data-name=ok]').click();\n  return cy.location('pathname', {\n    timeout: 10000\n  }).should('eq', '/'); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  return cy.task('getRecords'); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (accts) {\n  // Should have now cleaned up the unactivated copies.\n  expect(accts).to.have.lengthOf(1);\n  var _accts$ = accts[0],\n      user = _accts$.user,\n      activated = _accts$.activated,\n      activationCode = _accts$.activationCode;\n  expect(user).to.equal('nicky');\n  expect(activated).to.be[\"true\"];\n  expect(activationCode).to.equal(activCode);\n  return cy.log(accts);\n});",
              "err": {},
              "uuid": "ef8ecfb7-2c6f-4cbb-a832-be2629b61564",
              "parentUUID": "c7ce3a8a-f2bf-4549-b839-30fd0a9e0857",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Activation (Success) has no detectable a11y violations on load",
              "fullTitle": "Activation Visit Activation (Success) has no detectable a11y violations on load",
              "timedOut": null,
              "duration": 395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('deleteAllAccounts'); // Cypress won't run the tests with an `await` here\n// eslint-disable-next-line max-len\n// eslint-disable-next-line promise/prefer-await-to-then, promise/always-return\nreturn cy.task('addNonActivatedAccount').then(function (_ref2) {\n  var activationCode = _ref2.activationCode;\n  cy.visitURLAndCheckAccessibility('/activation?c=' + activationCode);\n});",
              "err": {},
              "uuid": "eae6c486-dd3f-4785-8548-683d81bc320b",
              "parentUUID": "c7ce3a8a-f2bf-4549-b839-30fd0a9e0857",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb9274ab-4f08-4601-ba48-6570881058dc",
            "16b34860-f94f-46eb-b14b-408fefdfdc04",
            "3ad65c56-3534-4e37-9899-209644497faf",
            "ad9afb92-9ca2-426b-a728-8d4e6774c418",
            "ef8ecfb7-2c6f-4cbb-a832-be2629b61564",
            "eae6c486-dd3f-4785-8548-683d81bc320b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4889,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0ccbe078-b25b-4c70-af1b-46830c2f9334",
      "title": "",
      "fullFile": "cypress/integration/coverage.js",
      "file": "cypress/integration/coverage.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e352a3e9-0c16-438c-ab62-650ca024113b",
          "title": "Coverage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Gets static coverage files",
              "fullTitle": "Coverage Gets static coverage files",
              "timedOut": null,
              "duration": 606,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/coverage');\ncy.visit('/coverage/');\ncy.visit('/coverage/index.html'); // eslint-disable-next-line cypress/require-data-selectors\ncy.get('body').should(function ($body) {\n  expect($body[0].textContent).to.contain('Statements');\n});",
              "err": {},
              "uuid": "9c4456b1-d045-412d-b866-18bb6b4bb869",
              "parentUUID": "e352a3e9-0c16-438c-ab62-650ca024113b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c4456b1-d045-412d-b866-18bb6b4bb869"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 606,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f1ae5ed1-6d0e-41c1-891e-8f96db3efd66",
      "title": "",
      "fullFile": "cypress/integration/home.js",
      "file": "cypress/integration/home.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f7e49b17-6976-4716-abe1-9e6066d691fb",
          "title": "Home",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Visit Home and be redirected when no session (no post to `/`, `/home` or GET to auto-login at `/` (from previous-set cookie posting to `/`)).",
              "fullTitle": "Home Visit Home and be redirected when no session (no post to `/`, `/home` or GET to auto-login at `/` (from previous-set cookie posting to `/`)).",
              "timedOut": null,
              "duration": 584,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('deleteAllAccounts');\ncy.visit('/home');\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/');",
              "err": {},
              "uuid": "dd902251-d183-45b3-9f0c-b021dfab175d",
              "parentUUID": "f7e49b17-6976-4716-abe1-9e6066d691fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d7cbccca-ae70-493f-96a5-943e1c058ede",
              "title": "Changing email",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Make good update (with same user but different email)",
                  "fullTitle": "Home Changing email Make good update (with same user but different email)",
                  "timedOut": null,
                  "duration": 44649,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(30000);\nvar startingEmail = 'brettz95@example.name';\nvar newEmail = NL_EMAIL_USER;\ncy.get('[data-name=\"email\"]').clear().type(newEmail);\ncy.get('[data-name=\"pass\"]').clear().type('boo123456');\ncy.get('[data-name=\"name\"]').clear().type('MyNewName');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=\"country\"]').select('FR');\ncy.get('[data-name=\"action2\"]').click(); // Cypress needs us to wait to be able to find the\n//   dialog to dismiss it\n// eslint-disable-next-line cypress/no-unnecessary-waiting\ncy.wait(500);\ncy.get('[data-confirm-type=\"notice\"] [data-name=\"submit-confirm\"]').click();\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=modal-alert] [data-name=modal-body] p', {\n  timeout: 50000\n}).contains('Your account has been updated but your email address');\ncy.get('[data-name=\"modal-alert\"] [data-name=\"ok\"]').click(); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords', {\n  user: ['bretto']\n}).then(function (accts) {\n  var _accts$ = accts[0],\n      user = _accts$.user,\n      name = _accts$.name,\n      country = _accts$.country,\n      email = _accts$.email;\n  expect(user).to.equal('bretto'); // Hasn't been activated yet, so keeps old email for now\n  expect(email).to.equal(startingEmail);\n  expect(country).to.equal('FR');\n  return expect(name).to.equal('MyNewName'); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  // We don't know exactly how long until the email will be delivered\n  // eslint-disable-next-line cypress/no-unnecessary-waiting\n  cy.wait(15000);\n  return cy.task('getMostRecentEmail', {\n    timeout: 90000\n  }); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (_ref) {\n  var html = _ref.html,\n      subject = _ref.subject,\n      emailDisabled = _ref.emailDisabled;\n  if (emailDisabled) {\n    // eslint-disable-next-line promise/no-return-wrap\n    return Promise.resolve(true);\n  } // A bit of redundancy with `hasEmail`, but we want to get the link too\n\n  expect(subject).to.equal('Account Activation');\n  expect(['Please click here to activate your account', '<a href=', 'activation?c='].every(function (str) {\n    return html.includes(str);\n  })).to.be[\"true\"];\n  var match = html.match( /*#__PURE__*/_wrapRegExp(/activation\\?c=((?:[\\0-!#-&\\(-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)/, {\n    activationCode: 1\n  }));\n  var activationCode = (match || {\n    groups: {}\n  }).groups.activationCode;\n  expect(activationCode).to.be.ok;\n  cy.visit('/activation?c=' + encodeURIComponent(activationCode)); // eslint-disable-next-line promise/no-return-wrap\n  return Promise.resolve(false); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (emailDisabled) {\n  if (emailDisabled) {\n    // eslint-disable-next-line promise/no-return-wrap\n    return Promise.resolve(true);\n  }\n  return cy.task('getRecords', {\n    user: ['bretto']\n  }); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (accts) {\n  if (accts === true) {\n    // eslint-disable-next-line promise/no-return-wrap\n    return Promise.resolve(true);\n  }\n  var _accts$2 = accts[0],\n      user = _accts$2.user,\n      name = _accts$2.name,\n      country = _accts$2.country,\n      email = _accts$2.email;\n  expect(user).to.equal('bretto'); // Should now be activated, so check that\n  expect(email).to.equal(newEmail);\n  expect(country).to.equal('FR');\n  return expect(name).to.equal('MyNewName');\n});",
                  "err": {
                    "message": "AssertionError: Timed out retrying: Expected to find content: 'Your account has been updated but your email address' within the element: <p> but never did.",
                    "estack": "AssertionError: Timed out retrying: Expected to find content: 'Your account has been updated but your email address' within the element: <p> but never did.\n    at ensureExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:137261:32)\n    at Object.ensureElExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:137279:12)\n    at ensureExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:127867:23)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:127905:9)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:9059:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:6994:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:7051:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:7096:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:7172:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:3766:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:3759:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:3775:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:3645:14)",
                    "diff": null
                  },
                  "uuid": "d458a322-5b63-4cbc-95eb-3e7c7790dea6",
                  "parentUUID": "d7cbccca-ae70-493f-96a5-943e1c058ede",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make good update (with same user but different email) but simulate visiting activation link too late",
                  "fullTitle": "Home Changing email Make good update (with same user but different email) but simulate visiting activation link too late",
                  "timedOut": null,
                  "duration": 114410,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(100000);\nvar startingEmail = 'brettz95@example.name';\nvar newEmail = NL_EMAIL_USER;\ncy.get('[data-name=\"email\"]').clear().type(newEmail);\ncy.get('[data-name=\"pass\"]').clear().type('boo123456');\ncy.get('[data-name=\"name\"]').clear().type('MyNewName');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=\"country\"]').select('FR');\ncy.get('[data-name=\"action2\"]').click(); // Cypress needs us to wait to be able to find the\n//   dialog to dismiss it\n// eslint-disable-next-line cypress/no-unnecessary-waiting\ncy.wait(500);\ncy.get('[data-confirm-type=\"notice\"] [data-name=\"submit-confirm\"]').click();\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=modal-alert] [data-name=modal-body] p', {\n  timeout: 60000\n}).contains('Your account has been updated but your email address');\ncy.get('[data-name=\"modal-alert\"] [data-name=\"ok\"]').click(); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords', {\n  user: ['bretto']\n}).then(function (accts) {\n  var _accts$3 = accts[0],\n      user = _accts$3.user,\n      name = _accts$3.name,\n      country = _accts$3.country,\n      email = _accts$3.email;\n  expect(user).to.equal('bretto'); // Hasn't been activated yet, so keeps old email for now\n  expect(email).to.equal(startingEmail);\n  expect(country).to.equal('FR');\n  return expect(name).to.equal('MyNewName'); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  // We don't know exactly how long until the email will be delivered\n  // eslint-disable-next-line cypress/no-unnecessary-waiting\n  cy.wait(15000);\n  return cy.task('getMostRecentEmail', {\n    timeout: 90000\n  }); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (_ref2) {\n  var html = _ref2.html,\n      subject = _ref2.subject,\n      emailDisabled = _ref2.emailDisabled;\n  if (emailDisabled) {\n    // eslint-disable-next-line promise/no-return-wrap\n    return Promise.resolve(true);\n  } // A bit of redundancy with `hasEmail`, but we want to get\n  //  the link too\n\n  expect(subject).to.equal('Account Activation');\n  expect(['Please click here to activate your account', '<a href=', 'activation?c='].every(function (str) {\n    return html.includes(str);\n  })).to.be[\"true\"];\n  var match = html.match( /*#__PURE__*/_wrapRegExp(/activation\\?c=((?:[\\0-!#-&\\(-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)/, {\n    activationCode: 1\n  }));\n  var activationCode = (match || {\n    groups: {}\n  }).groups.activationCode;\n  expect(activationCode).to.be.ok; // WE SIMULATE THE DELAY HERE\n  cy.task('simulateOldActivationRequestDate'); // END SIMULATION\n  cy.visit('/activation?c=' + encodeURIComponent(activationCode), {\n    failOnStatusCode: false\n  });\n  cy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('The activation code provided was invalid.'); // eslint-disable-next-line promise/no-return-wrap\n  return Promise.resolve(false); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (emailDisabled) {\n  if (emailDisabled) {\n    // eslint-disable-next-line promise/no-return-wrap\n    return Promise.resolve(true);\n  }\n  return cy.task('getRecords', {\n    user: ['bretto']\n  }); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (accts) {\n  if (accts === true) {\n    // eslint-disable-next-line promise/no-return-wrap\n    return Promise.resolve(true);\n  }\n  var _accts$4 = accts[0],\n      user = _accts$4.user,\n      name = _accts$4.name,\n      country = _accts$4.country,\n      email = _accts$4.email,\n      unactivatedEmail = _accts$4.unactivatedEmail;\n  expect(user).to.equal('bretto'); // Should not have been activated as we were too late, so\n  //  should have oldemail\n  expect(email).to.equal(startingEmail); // It should still have kept the desired email\n  expect(unactivatedEmail).to.equal(newEmail);\n  expect(country).to.equal('FR');\n  return expect(name).to.equal('MyNewName');\n});",
                  "err": {},
                  "uuid": "a06f9b04-1cd0-4a4c-b487-1fce968c6070",
                  "parentUUID": "d7cbccca-ae70-493f-96a5-943e1c058ede",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a06f9b04-1cd0-4a4c-b487-1fce968c6070"
              ],
              "failures": [
                "d458a322-5b63-4cbc-95eb-3e7c7790dea6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 159059,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
              "title": "Pre-logging in with session",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should log out",
                  "fullTitle": "Home Pre-logging in with session Should log out",
                  "timedOut": null,
                  "duration": 3896,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.getCookie('login').should('exist');\ncy.getCookie(expressSessionID).should('exist');\ncy.get('[data-name=\"btn-logout\"]').click();\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('You are now logged out.');\ncy.getCookie('login').should('not.exist'); //  Can't check that session is dropped by checking `expressSessionID`\n//  (`\"connect.sid\"`) as it does not get seem to get reset. However,\n//  it does seem to get dropped after server visit and can check this\n//  (where we're expected to be redirected).\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/');",
                  "err": {},
                  "uuid": "9f2c7d0d-9767-458d-a208-cdd91df5c26b",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Allows canceling of deleting account",
                  "fullTitle": "Home Pre-logging in with session Allows canceling of deleting account",
                  "timedOut": null,
                  "duration": 856,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('[data-name=\"account-form\"] .btn-danger').click();\ncy.get('[data-name=\"modal-body\"]').contains('Are you sure you want to delete your account?');\ncy.get('[data-confirm-type=\"deleteAccount\"] [data-name=\"cancel\"]').click(); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords', {\n  user: ['bretto']\n}).then(function (accts) {\n  expect(accts).to.have.lengthOf(1);\n  return cy.log(accts);\n});",
                  "err": {},
                  "uuid": "6c725855-55a2-4dc7-a1d7-7dfa34b755ec",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete account",
                  "fullTitle": "Home Pre-logging in with session Delete account",
                  "timedOut": null,
                  "duration": 4146,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('[data-name=\"account-form\"] .btn-danger').click();\ncy.get('[data-name=\"modal-body\"]').contains('Are you sure you want to delete your account?');\ncy.get('[data-confirm-type=\"deleteAccount\"] .btn-danger').click();\ncy.get('[data-name=modal-alert] [data-name=modal-body] p', {\n  timeout: 20000\n}).contains('Your account has been deleted.');\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/'); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords', {\n  user: ['bretto']\n}).then(function (accts) {\n  expect(accts).to.have.lengthOf(0);\n  return cy.log(accts);\n});",
                  "err": {},
                  "uuid": "07ccd675-8f3f-4bea-91ca-cf111ac84a25",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Problem with deleting (already-logged out) account",
                  "fullTitle": "Home Pre-logging in with session Problem with deleting (already-logged out) account",
                  "timedOut": null,
                  "duration": 4225,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// E.g., if user cleared their cookies\ncy.clearCookie('login');\ncy.clearCookie(expressSessionID);\ncy.get('[data-name=\"account-form\"] .btn-danger').click();\ncy.get('[data-name=\"modal-body\"]').contains('Are you sure you want to delete your account?');\ncy.get('[data-confirm-type=\"deleteAccount\"] .btn-danger').click();\ncy.get('[data-name=modal-alert] [data-name=modal-body] p', {\n  timeout: 20000\n}).contains('Record not found');\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/'); // User not deleted here, just not able to delete account when\n//  session was destroyed\n// eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords', {\n  user: ['bretto']\n}).then(function (accts) {\n  var user = accts[0].user;\n  expect(user).to.equal('bretto');\n  return cy.log(accts);\n});",
                  "err": {},
                  "uuid": "3774bf83-7659-4be6-b8fb-c25f486f102b",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Visit Home again",
                  "fullTitle": "Home Pre-logging in with session Visit Home again",
                  "timedOut": null,
                  "duration": 1156,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.getCookie(expressSessionID).should('exist');\ncy.get('[data-name=\"navbar-brand\"]', {\n  timeout: 10000\n}).contains('Control Panel'); // Home after login has no detectable a11y violations on load\n// https://www.npmjs.com/package/cypress-axe\nreturn cy.visitURLAndCheckAccessibility('/home');",
                  "err": {},
                  "uuid": "b7d6d846-5925-4f62-9396-cfefec2de5c8",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Allows canceling of submission after changed email",
                  "fullTitle": "Home Pre-logging in with session Allows canceling of submission after changed email",
                  "timedOut": null,
                  "duration": 1914,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var emailOfAnotherUser = 'me@example.name';\ncy.get('[data-name=\"email\"]').clear().type(emailOfAnotherUser);\ncy.get('[data-name=\"pass\"]').clear().type('boo123456');\ncy.get('[data-name=\"name\"]').clear().type('MyNewName');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=\"action2\"]').click();\ncy.get('[data-confirm-type=\"notice\"] [data-name=\"cancel\"]').click(); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords', {\n  user: ['bretto']\n}).then(function (accts) {\n  expect(accts).to.have.lengthOf(1);\n  expect(accts[0].email).to.equal(NL_EMAIL_USER);\n  return cy.log(accts);\n});",
                  "err": {},
                  "uuid": "2de5d661-be6c-4cef-9837-cedeccf8c0cb",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Attempt bad input to server",
                  "fullTitle": "Home Pre-logging in with session Attempt bad input to server",
                  "timedOut": null,
                  "duration": 2274,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\nvar nonEmail = 'nonEmail';\ncy.get('[data-name=\"email\"]').clear().type(nonEmail);\ncy.get('[data-name=\"email\"]:invalid').should('have.length', 1);\nvar emailOfAnotherUser = 'me@example.name';\ncy.get('[data-name=\"email\"]').clear().type(emailOfAnotherUser);\ncy.get('[data-name=\"pass\"]').clear().type('boo123456');\ncy.get('[data-name=\"name\"]').clear().type('MyNewName');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=\"action2\"]').click();\ncy.get('[data-confirm-type=\"notice\"] [data-name=\"submit-confirm\"]').click();\ncy.get('[data-confirm-type=\"notice\"] [data-name=\"submit-confirm\"]').click();\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').should('be.hidden');\ncy.get('[data-name=\"email\"]', {\n  timeout: 50000\n}).should(function ($email) {\n  return expect($email[0].validationMessage).to.contain('That email address is already in use');\n}); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords', {\n  user: ['bretto']\n}).then(function (accts) {\n  var _accts$5 = accts[0],\n      user = _accts$5.user,\n      name = _accts$5.name,\n      email = _accts$5.email;\n  expect(user).to.equal('bretto');\n  expect(email).to.equal(NL_EMAIL_USER);\n  expect(name).to.equal('Brett');\n  return cy.task('getRecords', {\n    user: ['nicky']\n  }); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (accts) {\n  var _accts$6 = accts[0],\n      user = _accts$6.user,\n      name = _accts$6.name,\n      email = _accts$6.email;\n  expect(user).to.equal('nicky');\n  expect(email).to.equal(emailOfAnotherUser);\n  return expect(name).to.equal('Nicole');\n});",
                  "err": {},
                  "uuid": "6f4c27d0-f72a-498c-ae92-1eb722ee5a43",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Attempt bad input to server (circumventing client-side validation) and to simulate a server email-sending error, followed by successfulupdate",
                  "fullTitle": "Home Pre-logging in with session Attempt bad input to server (circumventing client-side validation) and to simulate a server email-sending error, followed by successfulupdate",
                  "timedOut": null,
                  "duration": 19431,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var badEmail = 'badEmail'; // Todo: Should probably send to a legitimate email that we\n//  can auto-delete (without getting a forwarding error)\nvar validEmail = 'brettz9@example.name';\nreturn cy.simulateServerError({\n  url: '/home',\n  body: {\n    email: badEmail,\n    name: 'MyNewName',\n    country: 'FR',\n    pass: NL_EMAIL_PASS\n  },\n  error: 'problem-dispatching-link' // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  var goodEmailToPassClientValidation = NL_EMAIL_USER;\n  cy.get('[data-name=\"email\"]').clear().type(goodEmailToPassClientValidation);\n  cy.get('[data-name=\"pass\"]').clear().type(NL_EMAIL_PASS);\n  cy.get('[data-name=\"name\"]').clear().type('MyNewName');\n  cy.get('[data-name=\"action2\"]').click();\n  cy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('While your account was otherwise updated');\n  cy.get('[data-name=\"ok\"]').click();\n  return cy.task('getRecords', {\n    user: ['bretto']\n  }); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (accts) {\n  var _accts$7 = accts[0],\n      user = _accts$7.user,\n      name = _accts$7.name,\n      country = _accts$7.country,\n      email = _accts$7.email,\n      unactivatedEmail = _accts$7.unactivatedEmail;\n  expect(user).to.equal('bretto');\n  expect(email).to.equal(NL_EMAIL_USER); // Should probably be preventing the server from saving this,\n  //  but useful to trigger error and check our behavior\n  expect(unactivatedEmail).to.equal(badEmail);\n  expect(country).to.equal('FR');\n  return expect(name).to.equal('MyNewName'); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  cy.server({\n    enable: false\n  });\n  cy.get('[data-name=\"email\"]').clear().type(validEmail);\n  cy.get('[data-name=\"pass\"]').clear().type(NL_EMAIL_PASS);\n  cy.get('[data-name=\"name\"]').clear().type('YetAnotherName');\n  cy.get('[data-name=\"action2\"]').click(); // Cypress needs us to wait to be able to find the\n  //   dialog to dismiss it (at least when visually viewing tests)\n  // eslint-disable-next-line cypress/no-unnecessary-waiting\n  cy.wait(500);\n  cy.get('[data-confirm-type=\"notice\"] [data-name=\"submit-confirm\"]').click();\n  cy.get('[data-name=modal-alert] [data-name=modal-body] p').should('be.hidden');\n  return cy.task('getRecords', {\n    user: ['bretto']\n  }); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (accts) {\n  var _accts$8 = accts[0],\n      user = _accts$8.user,\n      name = _accts$8.name,\n      country = _accts$8.country,\n      email = _accts$8.email,\n      unactivatedEmail = _accts$8.unactivatedEmail;\n  expect(user).to.equal('bretto');\n  expect(unactivatedEmail).to.equal(validEmail);\n  expect(email).to.equal(NL_EMAIL_USER);\n  expect(country).to.equal('FR');\n  return expect(name).to.equal('YetAnotherName');\n});",
                  "err": {},
                  "uuid": "c08fd85b-d4f2-4a5d-92f0-dd336625680e",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Attempt bad input to server (generic error)",
                  "fullTitle": "Home Pre-logging in with session Attempt bad input to server (generic error)",
                  "timedOut": null,
                  "duration": 2019,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return cy.simulateServerError({\n  url: '/home',\n  body: {\n    email: NL_EMAIL_USER,\n    name: 'MyNewName',\n    pass: {}\n  },\n  error: 'Error Updating Account' // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  cy.get('[data-name=\"email\"]').clear().type(NL_EMAIL_USER);\n  var goodPasswordToPassClientValidation = 'boo123456';\n  cy.get('[data-name=\"pass\"]').clear().type(goodPasswordToPassClientValidation);\n  cy.get('[data-name=\"name\"]').clear().type('MyNewName');\n  cy.get('[data-name=\"action2\"]').click();\n  cy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('There was a failure submitting your info'); // Still the same old pass\n  return cy.validUserPassword({\n    user: 'bretto',\n    pass: NL_EMAIL_PASS\n  });\n});",
                  "err": {},
                  "uuid": "aebfad9b-ad6d-4923-9e96-49c52395be09",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not update when the session is lost",
                  "fullTitle": "Home Pre-logging in with session should not update when the session is lost",
                  "timedOut": null,
                  "duration": 2273,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(30000);\ncy.clearCookie('login');\ncy.clearCookie(expressSessionID);\ncy.get('[data-name=\"email\"]').clear().type(NL_EMAIL_USER);\ncy.get('[data-name=\"pass\"]').clear().type('boo123456');\ncy.get('[data-name=\"name\"]').clear().type('MyNewName');\ncy.get('[data-name=\"action2\"]').click();\ncy.get('[data-name=modal-alert] [data-name=modal-body] p', {\n  timeout: 20000\n}).contains('Your session has been lost');\ncy.get('[data-name=\"modal-alert\"] [data-name=\"ok\"]').click();\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/'); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords', {\n  user: ['bretto']\n}).then(function (accts) {\n  var _accts$9 = accts[0],\n      user = _accts$9.user,\n      name = _accts$9.name;\n  expect(user).to.equal('bretto');\n  return expect(name).to.equal('Brett');\n});",
                  "err": {},
                  "uuid": "eed3275a-6ea2-44ae-b043-bba1e38e9e3b",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject client-side forgery of another user",
                  "fullTitle": "Home Pre-logging in with session should reject client-side forgery of another user",
                  "timedOut": null,
                  "duration": 2166,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// If we use the exploiter's own email, will get error of the email\n//  already existing, and as we aren't testing new emails here,\n//   we just use the targeted user's existing email\ncy.get('[data-name=\"email\"]').clear().type(NL_EMAIL_USER);\ncy.get('[data-name=\"pass\"]').clear().type('boo123456');\ncy.get('[data-name=\"name\"]').clear().type('MyNewName'); // eslint-disable-next-line max-len\n// eslint-disable-next-line promise/prefer-await-to-then, promise/catch-or-return\ncy.get('[data-name=\"user\"]').then(function ($user) {\n  $user[0].disabled = false;\n  $user[0].value = 'nicky'; // Ensure got set\n  return expect($user[0].value).to.equal('nicky');\n});\ncy.get('[data-name=\"action2\"]').click(); // Todo: Could alert that user was not valid for session (if so,\n//   check the message here and update expectation below (i.e., that user\n//   name should not have been successfully changed)).\ncy.get('[data-name=\"modal-alert\"] [data-name=\"ok\"]').click();\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/home'); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords').then(function (accts) {\n  expect(accts).to.have.lengthOf(2);\n  expect(accts.some(function (_ref3) {\n    var user = _ref3.user,\n        name = _ref3.name;\n    // We could change to prevent successful edit of use's *own* name\n    return user === 'bretto' && name === 'MyNewName';\n  })).to.be[\"true\"];\n  return expect(accts.some(function (_ref4) {\n    var user = _ref4.user,\n        name = _ref4.name;\n    return user === 'nicky' && name === 'Nicole';\n  })).to.be[\"true\"];\n});",
                  "err": {},
                  "uuid": "68d5232f-b8b9-4383-9b6a-bdcf8f932a87",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Shows old values and makes good update (with same user and same email)",
                  "fullTitle": "Home Pre-logging in with session Shows old values and makes good update (with same user and same email)",
                  "timedOut": null,
                  "duration": 2323,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('[data-name=\"name\"]').should('have.value', 'Brett');\ncy.get('[data-name=\"email\"]').should('have.value', NL_EMAIL_USER);\ncy.get('[data-name=\"country\"] option[value=\"US\"]').should('be.selected');\ncy.get('[data-name=\"user\"]').should('have.value', 'bretto');\nvar passwordNotAutoAdded = '';\ncy.get('[data-name=\"pass\"]').should('have.value', passwordNotAutoAdded);\ncy.get('[data-name=\"email\"]').clear().type(NL_EMAIL_USER);\ncy.get('[data-name=\"pass\"]').clear().type('boo123456');\ncy.get('[data-name=\"name\"]').clear().type('MyNewName');\ncy.get('[data-name=\"country\"]').select('');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=\"action2\"]').click();\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('Your account has been updated.');\ncy.get('[data-name=\"modal-alert\"] [data-name=\"ok\"]').click(); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords', {\n  user: ['bretto']\n}).then(function (accts) {\n  var _accts$10 = accts[0],\n      user = _accts$10.user,\n      name = _accts$10.name,\n      email = _accts$10.email,\n      country = _accts$10.country;\n  expect(user).to.equal('bretto');\n  expect(email).to.equal(NL_EMAIL_USER);\n  expect(country).to.equal('');\n  return expect(name).to.equal('MyNewName');\n});",
                  "err": {},
                  "uuid": "92a779a8-a642-4379-8ff5-9c0326aac030",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Prevent update with empty email",
                  "fullTitle": "Home Pre-logging in with session Prevent update with empty email",
                  "timedOut": null,
                  "duration": 5715,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('[data-name=\"pass\"]').clear().type('boo123456');\ncy.get('[data-name=\"name\"]').clear().type('MyNewName');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=\"action2\"]').click(); // Todo[cypress@>4.3.0]: See if fixed:\n//   https://github.com/cypress-io/cypress/issues/6678\ncy.get('[data-name=\"email\"]:invalid').should('have.length', 1); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords', {\n  user: ['bretto']\n}).then(function (accts) {\n  var _accts$11 = accts[0],\n      user = _accts$11.user,\n      name = _accts$11.name,\n      email = _accts$11.email;\n  expect(user).to.equal('bretto');\n  expect(email).to.equal(NL_EMAIL_USER);\n  return expect(name).to.equal('Brett');\n});",
                  "err": {
                    "message": "AssertionError: Timed out retrying: Expected to find element: `[data-name=\"email\"]:invalid`, but never found it.",
                    "estack": "AssertionError: Timed out retrying: Expected to find element: `[data-name=\"email\"]:invalid`, but never found it.\n    at ensureExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:137261:32)\n    at Object.ensureElExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:137279:12)\n    at ensureExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:127867:23)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:127905:9)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:9059:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:6994:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:7051:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:7096:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:7172:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:3766:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:3759:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:3775:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:3645:14)",
                    "diff": null
                  },
                  "uuid": "fdfe6c86-48d0-4ec9-9df2-0f15807d7d96",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Attempt bad client-side input",
                  "fullTitle": "Home Pre-logging in with session Attempt bad client-side input",
                  "timedOut": null,
                  "duration": 6320,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var tooShortOfAName = 'a';\ncy.get('[data-name=\"email\"]').clear().type(NL_EMAIL_USER);\ncy.get('[data-name=\"pass\"]').clear().type('boo123456');\ncy.get('[data-name=\"name\"]').clear().type(tooShortOfAName).blur();\ncy.get('[data-name=\"action2\"]').click(); // Todo[cypress@>4.3.0]: See if fixed:\n//   https://github.com/cypress-io/cypress/issues/6678\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 1); // eslint-disable-next-line max-len\n// eslint-disable-next-line promise/catch-or-return, promise/prefer-await-to-then\ncy.get('[data-name=\"name\"]').then(function ($input) {\n  return expect($input[0].validity.tooShort).to.be[\"true\"]; // return expect($input[0].validationMessage).to.eq(\n  //  'Please enter a sufficiently long name'\n  // );\n});",
                  "err": {
                    "message": "AssertionError: Timed out retrying: Expected to find element: `[data-name=\"name\"]:invalid`, but never found it.",
                    "estack": "AssertionError: Timed out retrying: Expected to find element: `[data-name=\"name\"]:invalid`, but never found it.\n    at ensureExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:137261:32)\n    at Object.ensureElExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:137279:12)\n    at ensureExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:127867:23)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:127905:9)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:9059:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:6994:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:7051:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:7096:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:7172:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:3766:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:3759:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:3775:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:3645:14)",
                    "diff": null
                  },
                  "uuid": "fb03c55c-14ea-493e-8b7f-49c30406b828",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should show error upon bad log out",
                  "fullTitle": "Home Pre-logging in with session Should show error upon bad log out",
                  "timedOut": null,
                  "duration": 541,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.getCookie('login').should('exist');\ncy.getCookie(expressSessionID).should('exist');\ncy.server();\ncy.route({\n  status: 500,\n  url: '/logout',\n  method: 'POST',\n  response: 'oops'\n});\ncy.get('[data-name=\"btn-logout\"]').click();\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('There was a problem logging out');\ncy.getCookie('login').should('exist');\n/*\n// Could check this in full UI mode to ensure session is not dropped.\ncy.visit('/home');\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/home');\n*/",
                  "err": {},
                  "uuid": "0b434c60-ee54-4d64-ac8d-95545759ad0f",
                  "parentUUID": "13f27ec1-c4d9-40c1-bbc0-e7af5bce9d01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f2c7d0d-9767-458d-a208-cdd91df5c26b",
                "6c725855-55a2-4dc7-a1d7-7dfa34b755ec",
                "07ccd675-8f3f-4bea-91ca-cf111ac84a25",
                "3774bf83-7659-4be6-b8fb-c25f486f102b",
                "b7d6d846-5925-4f62-9396-cfefec2de5c8",
                "2de5d661-be6c-4cef-9837-cedeccf8c0cb",
                "6f4c27d0-f72a-498c-ae92-1eb722ee5a43",
                "c08fd85b-d4f2-4a5d-92f0-dd336625680e",
                "aebfad9b-ad6d-4923-9e96-49c52395be09",
                "eed3275a-6ea2-44ae-b043-bba1e38e9e3b",
                "68d5232f-b8b9-4383-9b6a-bdcf8f932a87",
                "92a779a8-a642-4379-8ff5-9c0326aac030",
                "0b434c60-ee54-4d64-ac8d-95545759ad0f"
              ],
              "failures": [
                "fdfe6c86-48d0-4ec9-9df2-0f15807d7d96",
                "fb03c55c-14ea-493e-8b7f-49c30406b828"
              ],
              "pending": [],
              "skipped": [],
              "duration": 59255,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "dd902251-d183-45b3-9f0c-b021dfab175d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 584,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "86ae164e-d580-4a77-a0a3-43996024f082",
      "title": "",
      "fullFile": "cypress/integration/lang.js",
      "file": "cypress/integration/lang.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6bb5557e-62af-425c-bf05-c75e9b25ceef",
          "title": "Lang",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get lang",
              "fullTitle": "Lang Get lang",
              "timedOut": null,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('/_lang').its('body').should('include', 'window._ = IntlDom.i18nServer(');",
              "err": {},
              "uuid": "97487853-64ab-4e87-b38e-efba928f9d54",
              "parentUUID": "6bb5557e-62af-425c-bf05-c75e9b25ceef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "97487853-64ab-4e87-b38e-efba928f9d54"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 214,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "eaf3b544-3328-4fe9-bf34-284bf5342ef4",
      "title": "",
      "fullFile": "cypress/integration/reset-password.js",
      "file": "cypress/integration/reset-password.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cfcb5703-f56c-45cb-870a-50e7cd6e7b34",
          "title": "Reset password",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "reset-password has no detectable a11y violations on load",
              "fullTitle": "Reset password reset-password has no detectable a11y violations on load",
              "timedOut": null,
              "duration": 830,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitURLAndCheckAccessibility('/reset-password');",
              "err": {},
              "uuid": "0b73f756-ec29-4167-86c2-f9b68beb1e74",
              "parentUUID": "cfcb5703-f56c-45cb-870a-50e7cd6e7b34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit reset password",
              "fullTitle": "Reset password Visit reset password",
              "timedOut": null,
              "duration": 405,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/reset-password');",
              "err": {},
              "uuid": "57c35eef-95e2-4f55-9131-f266d1a8a89a",
              "parentUUID": "cfcb5703-f56c-45cb-870a-50e7cd6e7b34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Report errors of insufficiently long passwords",
              "fullTitle": "Reset password Report errors of insufficiently long passwords",
              "timedOut": null,
              "duration": 5072,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "return cy.task('generatePasswordKey', {\n  email: NL_EMAIL_USER,\n  // ipv6 read by Express\n  ip: '::ffff:127.0.0.1' // Cypress won't run the tests with an `await` here\n  // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (key) {\n  cy.log(key);\n  cy.visit('/reset-password?key=' + encodeURIComponent(key));\n  cy.get('[data-name=enter-new-pass-label]').contains('Please enter your new password');\n  cy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\n  var tooShortPassword = 'a';\n  cy.get('[data-name=\"reset-pass\"]').type(tooShortPassword); // cy.get('[data-name=\"reset-password-submit\"]').click();\n  // Todo[cypress@>4.3.0]: See if fixed:\n  //   https://github.com/cypress-io/cypress/issues/6678\n  cy.get('[data-name=\"reset-pass\"]:invalid').should('have.length', 1);\n  return cy.get('[data-name=\"reset-pass\"]'); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function ($input) {\n  expect($input[0].checkValidity()).to.equal(false);\n  return expect($input[0].validity.tooShort).to.be[\"true\"]; // return expect($input[0].validationMessage).to.eq(\n  //  'Please enter a sufficiently long name'\n  // );\n});",
              "err": {
                "message": "AssertionError: Timed out retrying: Expected to find element: `[data-name=\"reset-pass\"]:invalid`, but never found it.",
                "estack": "AssertionError: Timed out retrying: Expected to find element: `[data-name=\"reset-pass\"]:invalid`, but never found it.\n    at ensureExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:137261:32)\n    at Object.ensureElExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:137279:12)\n    at ensureExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:127867:23)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:127905:9)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:9059:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:6994:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:7051:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:7096:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:7172:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:3766:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:3759:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:3775:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:3645:14)",
                "diff": null
              },
              "uuid": "a723fb57-aa3b-49fa-8f14-7a38af982ac9",
              "parentUUID": "cfcb5703-f56c-45cb-870a-50e7cd6e7b34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit reset password (after login)",
              "fullTitle": "Reset password Visit reset password (after login)",
              "timedOut": null,
              "duration": 3930,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return cy.task('generatePasswordKey', {\n  email: NL_EMAIL_USER,\n  // ipv6 read by Express\n  ip: '::ffff:127.0.0.1' // Cypress won't run the tests with an `await` here\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line promise/prefer-await-to-then, promise/always-return\n}).then(function (key) {\n  cy.log(key);\n  cy.visit('/reset-password?key=' + encodeURIComponent(key));\n  cy.get('[data-name=enter-new-pass-label]').contains('Please enter your new password');\n  cy.get('[data-name=\"reset-pass\"]').should('have.focus');\n  cy.get('[data-name=\"reset-pass\"]').type('new' + NL_EMAIL_PASS);\n  cy.get('[data-name=\"reset-password-submit\"]').click();\n  cy.get('[data-name=modal-dialog] .alert').contains('Your password has been reset');\n  cy.location('pathname', {\n    timeout: 10000\n  }).should('eq', '/');\n  cy.validUserPassword({\n    user: 'bretto',\n    pass: 'new' + NL_EMAIL_PASS\n  });\n});",
              "err": {},
              "uuid": "a42929ef-d48a-4ae1-a1df-22af711060ae",
              "parentUUID": "cfcb5703-f56c-45cb-870a-50e7cd6e7b34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Provides an error if unable to update password",
              "fullTitle": "Reset password Provides an error if unable to update password",
              "timedOut": null,
              "duration": 709,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return cy.task('generatePasswordKey', {\n  email: NL_EMAIL_USER,\n  // ipv6 read by Express\n  ip: '::ffff:127.0.0.1' // Cypress won't run the tests with an `await` here\n  // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (key) {\n  cy.log(key);\n  cy.visit('/reset-password?key=' + encodeURIComponent(key));\n  return cy.simulateServerError({\n    url: '/reset-password',\n    routeURL: '/reset-password**',\n    body: {\n      pass: null\n    },\n    error: 'Unable to update password'\n  }); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  cy.get('[data-name=\"reset-pass\"]').type('new' + NL_EMAIL_PASS);\n  cy.get('[data-name=\"reset-password-submit\"]').click();\n  cy.get('[data-name=modal-dialog] .alert').contains('I\\'m sorry something went wrong, please try again'); // Still the same old pass\n  return cy.validUserPassword({\n    user: 'bretto',\n    pass: NL_EMAIL_PASS\n  });\n});",
              "err": {},
              "uuid": "f6978528-5f56-49b3-89d3-3ff9efc657b8",
              "parentUUID": "cfcb5703-f56c-45cb-870a-50e7cd6e7b34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0b73f756-ec29-4167-86c2-f9b68beb1e74",
            "57c35eef-95e2-4f55-9131-f266d1a8a89a",
            "a42929ef-d48a-4ae1-a1df-22af711060ae",
            "f6978528-5f56-49b3-89d3-3ff9efc657b8"
          ],
          "failures": [
            "a723fb57-aa3b-49fa-8f14-7a38af982ac9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10946,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "77d7f79f-785d-4a02-b767-03feab7c7415",
      "title": "",
      "fullFile": "cypress/integration/root.js",
      "file": "cypress/integration/root.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d08604e3-23ba-4eed-8fd5-64283f7df918",
          "title": "Root (Login) - Accessibility",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Root has no detectable a11y violations on load",
              "fullTitle": "Root (Login) - Accessibility Root has no detectable a11y violations on load",
              "timedOut": null,
              "duration": 797,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitURLAndCheckAccessibility('/');",
              "err": {},
              "uuid": "6af5bd8a-7bb9-4931-b966-170dbcb5f926",
              "parentUUID": "d08604e3-23ba-4eed-8fd5-64283f7df918",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6af5bd8a-7bb9-4931-b966-170dbcb5f926"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 797,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
          "title": "Root (Login)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Visit root and login with Remember Me",
              "fullTitle": "Root (Login) Visit root and login with Remember Me",
              "timedOut": null,
              "duration": 2019,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Click twice to check toggling behavior\ncy.get('[data-name=btn_remember]').click();\ncy.get('[data-name=btn_remember]').click();\n/*\n// Signs up but no UI-only way to get and add activation code\n//   needed for login; however, keeping below for reference in\n//   the event we decide to add a more precise yet slower UI\n//   test from end-to-end\ncy.visit('/signup');\ncy.get('[data-name=\"name\"]').type('Brett');\ncy.get('[data-name=\"email\"]').type(NL_EMAIL_USER);\ncy.get('[data-name=\"country\"]').select('US');\ncy.get('[data-name=\"user\"]').type('bretto');\ncy.get('[data-name=\"pass\"]').type(NL_EMAIL_PASS);\ncy.get('[data-name=\"pass-confirm\"]').type(NL_EMAIL_PASS);\ncy.get('[data-name=account-form] [data-name=action2]').click();\ncy.get('[data-name=modal-alert] [data-name=ok]').click({\n  timeout: 20000\n});\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/');\n*/\ncy.get('[data-name=\"user\"]').type('bretto');\ncy.get('[data-name=\"pass\"]').type(NL_EMAIL_PASS);\ncy.get('[data-name=\"btn_sign_in\"]').click();\ncy.getCookie('login').should('have.property', 'value');\ncy.get('[data-name=account-form] .btn-danger').click();\ncy.get('[data-name=modal-confirm] .btn-danger').click();\ncy.get('[data-name=modal-alert] [data-name=modal-title]').contains('Success!');\nreturn cy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/home');",
              "err": {},
              "uuid": "252f762c-675b-4c49-a28e-25e27ec3022f",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit root and login with Remember Me button disabled",
              "fullTitle": "Root (Login) Visit root and login with Remember Me button disabled",
              "timedOut": null,
              "duration": 2047,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-name=btn_remember]').click();\ncy.get('[data-name=\"user\"]').type('bretto');\ncy.get('[data-name=\"pass\"]').type(NL_EMAIL_PASS);\ncy.get('[data-name=\"btn_sign_in\"]').click();\ncy.getCookie('login').should('not.exist');\ncy.get('[data-name=account-form] .btn-danger').click();\ncy.get('[data-name=modal-confirm] .btn-danger').click();\ncy.get('[data-name=modal-alert] [data-name=modal-title]').contains('Success!');\nreturn cy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/home');",
              "err": {},
              "uuid": "a548f2c5-0c87-46cd-9f61-257f6c0442fe",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit root and login and make login attempt with bad password",
              "fullTitle": "Root (Login) Visit root and login and make login attempt with bad password",
              "timedOut": null,
              "duration": 978,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-name=\"user\"]').type('bretto');\nvar mismatchedPass = 'mismatchedPass';\ncy.get('[data-name=\"pass\"]').type(mismatchedPass);\ncy.get('[data-name=\"btn_sign_in\"]').click();\ncy.get('[data-name=modal-alert] [data-name=\"modal-title\"]').contains('Login Failure');\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('Please check your username and/or password');\nreturn cy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/');",
              "err": {},
              "uuid": "697a4687-1e5c-4f93-8cf7-bc8789c28d62",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit root and login and make login attempt with bad user",
              "fullTitle": "Root (Login) Visit root and login and make login attempt with bad user",
              "timedOut": null,
              "duration": 980,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-name=\"user\"]').type('breeeeee');\ncy.get('[data-name=\"pass\"]').type('somePass');\ncy.get('[data-name=\"btn_sign_in\"]').click();\ncy.get('[data-name=modal-alert] [data-name=\"modal-title\"]').contains('Login Failure');\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('Please check your username and/or password');\nreturn cy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/');",
              "err": {},
              "uuid": "cb42fe97-06ff-4c63-89c6-3b4314756041",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit root and login and make login attempt with user added with bad password version",
              "fullTitle": "Root (Login) Visit root and login and make login attempt with user added with bad password version",
              "timedOut": null,
              "duration": 983,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('addAccountWithBadPassVersion');\ncy.get('[data-name=\"user\"]').type('Frankee');\ncy.get('[data-name=\"pass\"]').type('ooo123456');\ncy.get('[data-name=\"btn_sign_in\"]').click();\ncy.get('[data-name=modal-alert] [data-name=\"modal-title\"]').contains('Login Failure');\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('There is a mismatch in the user data format. Please contact ' + 'the site administrator with this message.');\nreturn cy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/');",
              "err": {},
              "uuid": "7583f576-1529-4e41-98bf-b9bdd83992ad",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Handle generic server error upon login attempt",
              "fullTitle": "Root (Login) Handle generic server error upon login attempt",
              "timedOut": null,
              "duration": 979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return cy.simulateServerError({\n  url: '/',\n  body: {\n    user: 'bretto',\n    pass: null\n  },\n  error: 'The \"password\" argument must be one of type string, ' + 'Buffer, TypedArray, or DataView. Received type object' // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  var passwordToPassClientValidation = 'abc123456';\n  cy.get('[data-name=\"user\"]').type('bretto');\n  cy.get('[data-name=\"pass\"]').type(passwordToPassClientValidation);\n  cy.get('[data-name=\"btn_sign_in\"]').click();\n  cy.get('[data-name=modal-alert] [data-name=\"modal-title\"]').contains('Login Failure');\n  cy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('Please check your username and/or password');\n  return cy.location('pathname', {\n    timeout: 10000\n  }).should('eq', '/');\n});",
              "err": {},
              "uuid": "3eed5384-ec82-4ea2-9109-3e7f1fb3c8c5",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Retrieve lost password",
              "fullTitle": "Root (Login) Retrieve lost password",
              "timedOut": null,
              "duration": 120200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(200000);\ncy.task('deleteEmails', null, {\n  timeout: 100000\n});\ncy.get('[data-name=\"forgot-password\"]').click();\ncy.get('[data-name=\"email\"]').type(NL_EMAIL_USER);\ncy.get('[data-name=retrieve-password-submit]').click();\ncy.get('[data-name=alert]').contains('A link to reset your password was emailed to you', {\n  timeout: 60000\n}); // We don't know exactly how long until the email will be delivered\n// eslint-disable-next-line cypress/no-unnecessary-waiting\ncy.wait(15000); // Check that password was received by email\nreturn cy.task('hasEmail', {\n  subject: 'Password Reset',\n  html: ['Click here to reset your password', '<a href=', 'reset-password?key='] // eslint-disable-next-line promise/prefer-await-to-then\n}, {\n  timeout: 70000\n}).then(function (hasEmail) {\n  // Todo: In full UI testing mode, we could look for the link and\n  //   visit it.\n  return expect(hasEmail).to.be[\"true\"];\n});",
              "err": {},
              "uuid": "9a345e12-cf45-4fe3-9e43-5f088d7059b8",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Shows failures on attempted retrieval of lost password with bad email",
              "fullTitle": "Root (Login) Shows failures on attempted retrieval of lost password with bad email",
              "timedOut": null,
              "duration": 1060,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-name=\"forgot-password\"]').click();\ncy.get('[data-name=\"email\"]').type('not-an-email');\ncy.get('[data-name=retrieve-password-submit]').click();\nreturn cy.get('[data-name=\"email\"]').should(function (user) {\n  expect(user[0].checkValidity()).to.equal(false);\n  return expect(user[0].validationMessage).to.contain('Please enter a valid email address');\n});",
              "err": {},
              "uuid": "2ce03112-3d9c-4b3d-b1c9-dff4f2dd2926",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Displays error with failure on dispatching lost password",
              "fullTitle": "Root (Login) Displays error with failure on dispatching lost password",
              "timedOut": null,
              "duration": 15334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('addAccountWithBadEmail');\nvar badButExistingEmail = 'badEmail';\nreturn cy.simulateServerError({\n  url: '/lost-password',\n  body: {\n    email: badButExistingEmail\n  },\n  error: 'Unable to dispatch password reset' // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  var okEmailToBypassValidationAndGetToStub = 'example@example.name';\n  cy.get('[data-name=\"forgot-password\"]').click();\n  cy.get('[data-name=\"email\"]').type(okEmailToBypassValidationAndGetToStub);\n  cy.get('[data-name=retrieve-password-submit]').click(); // Could check that email is not present, but with problems in deleting\n  //  emails currently, this would not be true, and whether it was sent\n  //  or not is not too important here.\n  return cy.get('[data-name=\"retrieve-password\"] [data-name=alert]').contains('Sorry. There was a problem, please try again later');\n});",
              "err": {},
              "uuid": "ee9750de-f4c3-42ba-8d50-91fbd8973028",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Err upon attempt to retrieve lost password for non-existent email",
              "fullTitle": "Root (Login) Err upon attempt to retrieve lost password for non-existent email",
              "timedOut": null,
              "duration": 1322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-name=\"forgot-password\"]').click();\ncy.get('[data-name=\"email\"]').type('bad@bad-email.com');\ncy.get('[data-name=retrieve-password-submit]').click();\ncy.get('[data-name=alert]').contains('Email not found. Are you sure you entered it correctly?', {\n  timeout: 20000\n});",
              "err": {},
              "uuid": "cb648219-234e-4e3e-960d-9f8450766ed1",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cancel retrieve password dialog",
              "fullTitle": "Root (Login) Cancel retrieve password dialog",
              "timedOut": null,
              "duration": 655,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-name=\"forgot-password\"]').click();\ncy.get('[data-name=\"retrieve-password-cancel\"]').click();\ncy.get('[data-name=\"login\"] [data-name=\"user\"]', {\n  timeout: 8000\n}).should('have.focus');",
              "err": {},
              "uuid": "77fda7ea-0f00-4c1f-98f4-16a771187359",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate against missing user value",
              "fullTitle": "Root (Login) Should validate against missing user value",
              "timedOut": null,
              "duration": 1144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-name=\"pass\"]').type(NL_EMAIL_PASS);\ncy.get('[data-name=\"btn_sign_in\"]').click();\nreturn cy.get('[data-name=\"user\"]').should(function (user) {\n  return expect(user[0].checkValidity()).to.equal(false);\n});",
              "err": {},
              "uuid": "73aa6b9c-b9a6-4dcc-bb54-63b3210e0539",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should validate against missing pass value",
              "fullTitle": "Root (Login) Should validate against missing pass value",
              "timedOut": null,
              "duration": 639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-name=\"user\"]').type('bretto');\ncy.get('[data-name=\"btn_sign_in\"]').click();\ncy.get('[data-name=\"pass\"]').should(function (pass) {\n  expect(pass[0].checkValidity()).to.equal(false);\n});",
              "err": {},
              "uuid": "86a33c04-3a69-4699-a85b-d1c9ad976e3f",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit auto-logging-in root after initial login",
              "fullTitle": "Root (Login) Visit auto-logging-in root after initial login",
              "timedOut": null,
              "duration": 1098,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(env); // See `hackEnv` on how apparently not working and why we need this hack\n// const secure = Cypress.env('env') === 'production'\nvar secure = env === 'production';\nreturn cy.login({\n  user: 'bretto',\n  // ipv6 read by Express\n  ip: '::ffff:127.0.0.1',\n  secure: secure // Cypress won't run the tests with an `await` here\n  // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (key) {\n  cy.visit('/');\n  cy.location('pathname', {\n    timeout: 10000\n  }).should('eq', '/home');\n  cy.log(key);\n  cy.getCookie('login').should('have.property', 'value', key);\n  cy.getCookie('login').should('have.property', 'secure', secure);\n  return cy.getCookie(expressSessionID).should('exist');\n});",
              "err": {},
              "uuid": "d7bbfca2-bc01-4db1-be65-b59b43a1d2ad",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit auto-logging-in root after initial login and with redirect",
              "fullTitle": "Root (Login) Visit auto-logging-in root after initial login and with redirect",
              "timedOut": null,
              "duration": 1168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(env); // See `hackEnv` on how apparently not working and why we need this hack\n// const secure = Cypress.env('env') === 'production'\nvar secure = env === 'production';\nreturn cy.login({\n  user: 'bretto',\n  // ipv6 read by Express\n  ip: '::ffff:127.0.0.1',\n  secure: secure // Cypress won't run the tests with an `await` here\n  // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (key) {\n  cy.visit('/?redirect=/signup');\n  cy.location('pathname', {\n    timeout: 10000\n  }).should('eq', '/signup');\n  cy.log(key);\n  cy.getCookie('login').should('have.property', 'value', key);\n  cy.getCookie('login').should('have.property', 'secure', secure);\n  return cy.getCookie(expressSessionID).should('exist');\n});",
              "err": {},
              "uuid": "9bb5d67d-5d2c-43a4-a509-d65ef7aca974",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successful `validateLoginKey` but mismatched `autoLogin`",
              "fullTitle": "Root (Login) Successful `validateLoginKey` but mismatched `autoLogin`",
              "timedOut": null,
              "duration": 1052,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.loginWithSession();\ncy.task('updateAccountToInactive'); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords').then(function (accts) {\n  expect(accts).to.have.lengthOf(1);\n  expect(accts[0].activated).to.be[\"false\"];\n  return cy.visit('/');\n});",
              "err": {},
              "uuid": "3088c888-c034-4892-b762-5294ab594315",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject bad login even in proper cookie format",
              "fullTitle": "Root (Login) should reject bad login even in proper cookie format",
              "timedOut": null,
              "duration": 785,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var secure = Cypress.env('env') === 'production';\nreturn cy.login({\n  user: 'bretto',\n  // ipv6 read by Express\n  ip: '::ffff:127.0.0.1',\n  // Won't have server secret, so try our own\n  badSecret: 'abcdabcdabcd',\n  secure: secure // Cypress won't run the tests with an `await` here\n  // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (key) {\n  cy.getCookie('login').should('have.property', 'value', key);\n  cy.getCookie('login').should('have.property', 'secure', secure);\n  return cy.getCookie(expressSessionID).should('exist'); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  cy.visit('/');\n  return cy.location('pathname', {\n    timeout: 10000\n  }).should('not.equal', '/home');\n});",
              "err": {},
              "uuid": "14c53159-47b7-4ccf-84e1-9d5589b22544",
              "parentUUID": "2060aadb-2bba-4d41-8f66-6c5c1ca5935c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "252f762c-675b-4c49-a28e-25e27ec3022f",
            "a548f2c5-0c87-46cd-9f61-257f6c0442fe",
            "697a4687-1e5c-4f93-8cf7-bc8789c28d62",
            "cb42fe97-06ff-4c63-89c6-3b4314756041",
            "7583f576-1529-4e41-98bf-b9bdd83992ad",
            "3eed5384-ec82-4ea2-9109-3e7f1fb3c8c5",
            "9a345e12-cf45-4fe3-9e43-5f088d7059b8",
            "2ce03112-3d9c-4b3d-b1c9-dff4f2dd2926",
            "ee9750de-f4c3-42ba-8d50-91fbd8973028",
            "cb648219-234e-4e3e-960d-9f8450766ed1",
            "77fda7ea-0f00-4c1f-98f4-16a771187359",
            "73aa6b9c-b9a6-4dcc-bb54-63b3210e0539",
            "86a33c04-3a69-4699-a85b-d1c9ad976e3f",
            "d7bbfca2-bc01-4db1-be65-b59b43a1d2ad",
            "9bb5d67d-5d2c-43a4-a509-d65ef7aca974",
            "3088c888-c034-4892-b762-5294ab594315",
            "14c53159-47b7-4ccf-84e1-9d5589b22544"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 152443,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6d37be9f-a38b-4b32-8072-9258d494f947",
      "title": "",
      "fullFile": "cypress/integration/signup.js",
      "file": "cypress/integration/signup.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5b236317-c8fc-450a-8f91-1ab93089cb3d",
          "title": "Signup",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Signup has no detectable a11y violations on load",
              "fullTitle": "Signup Signup has no detectable a11y violations on load",
              "timedOut": null,
              "duration": 991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitURLAndCheckAccessibility('/signup');",
              "err": {},
              "uuid": "a13fc408-178a-4528-b82c-b54b497c76a5",
              "parentUUID": "5b236317-c8fc-450a-8f91-1ab93089cb3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Signup and try entering bad data client-side",
              "fullTitle": "Signup Visit Signup and try entering bad data client-side",
              "timedOut": null,
              "duration": 5282,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visit('/signup');\nvar tooShortUser = 'a';\ncy.get('[data-name=\"user\"]').type(tooShortUser);\ncy.get('[data-name=\"action2\"]').click();\ncy.get('[data-name=\"user\"]:invalid').should('have.length', 1);\nvar tooShortName = 'b';\ncy.get('[data-name=\"name\"]').type(tooShortName);\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 1);\nvar tooShortPass = 'c';\ncy.get('[data-name=\"pass\"]').type(tooShortPass);\ncy.get('[data-name=\"pass\"]:invalid').should('have.length', 1);",
              "err": {
                "message": "AssertionError: Timed out retrying: Expected to find element: `[data-name=\"user\"]:invalid`, but never found it.",
                "estack": "AssertionError: Timed out retrying: Expected to find element: `[data-name=\"user\"]:invalid`, but never found it.\n    at ensureExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:137261:32)\n    at Object.ensureElExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:137279:12)\n    at ensureExistence (http://localhost:3000/__cypress/runner/cypress_runner.js:127867:23)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:127905:9)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:9059:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:6994:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:7051:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:7096:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:7172:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:3766:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:3759:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:3775:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:3645:14)",
                "diff": null
              },
              "uuid": "6a3e3df2-66b9-4bff-a260-39a8f8354a48",
              "parentUUID": "5b236317-c8fc-450a-8f91-1ab93089cb3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Signup and submit with bad data (email in use)",
              "fullTitle": "Signup Visit Signup and submit with bad data (email in use)",
              "timedOut": null,
              "duration": 29467,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(100000);\ncy.task('deleteEmails', null, {\n  timeout: 100000\n});\ncy.task('addExtraActivatedAccount');\ncy.visit('/signup');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\nvar nonEmail = 'nonEmail';\ncy.get('[data-name=\"email\"]').type(nonEmail);\ncy.get('[data-name=\"email\"]:invalid').should('have.length', 1);\ncy.get('[data-name=\"email\"]').clear().type('me@example.name');\ncy.get('[data-name=\"pass\"]').type('boo123456');\ncy.get('[data-name=\"pass-confirm\"]').type('boo123456');\ncy.get('[data-name=\"name\"]').type('MyName');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=\"user\"]').type('AUser');\ncy.get('[data-name=\"action2\"]').click();\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').should('be.hidden');\ncy.get('[data-name=\"email\"]', {\n  timeout: 50000\n}).should(function ($email) {\n  return expect($email[0].validationMessage).to.contain('That email address is already in use');\n}); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords').then(function (accts) {\n  expect(accts).to.have.lengthOf(1);\n  return expect(accts[0].name).to.equal('Nicole');\n});",
              "err": {},
              "uuid": "d2180f50-be06-4c0e-a0cb-1d5f860fefbd",
              "parentUUID": "5b236317-c8fc-450a-8f91-1ab93089cb3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Signup and submit with bad data (user in use)",
              "fullTitle": "Signup Visit Signup and submit with bad data (user in use)",
              "timedOut": null,
              "duration": 2224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('addExtraActivatedAccount');\ncy.visit('/signup');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\nvar nonEmail = 'nonEmail';\ncy.get('[data-name=\"email\"]').type(nonEmail);\ncy.get('[data-name=\"email\"]:invalid').should('have.length', 1);\ncy.get('[data-name=\"email\"]').clear().type('me@example.name');\ncy.get('[data-name=\"pass\"]').type('boo123456');\ncy.get('[data-name=\"pass-confirm\"]').type('boo123456');\ncy.get('[data-name=\"name\"]').type('MyName');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\nvar alreadyExistingUser = 'nicky';\ncy.get('[data-name=\"user\"]').type(alreadyExistingUser);\ncy.get('[data-name=\"action2\"]').click();\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').should('be.hidden');\ncy.get('[data-name=\"user\"]', {\n  timeout: 50000\n}).should(function ($user) {\n  return expect($user[0].validationMessage).to.contain('That username is already in use');\n}); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords').then(function (accts) {\n  expect(accts).to.have.lengthOf(1);\n  return expect(accts[0].name).to.equal('Nicole');\n});",
              "err": {},
              "uuid": "4087e41f-9955-4c2f-b078-7248dbd855f2",
              "parentUUID": "5b236317-c8fc-450a-8f91-1ab93089cb3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Bad email to server",
              "fullTitle": "Signup Bad email to server",
              "timedOut": null,
              "duration": 2367,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The client won't allow bad values, so we pass without\n//   client-side validation\nvar badEmail = null;\ncy.visit('/signup');\nreturn cy.simulateServerError({\n  url: '/signup',\n  body: {\n    name: 'MyName',\n    email: badEmail,\n    user: 'OkUserName',\n    pass: 'okPassword1234',\n    country: 'GB'\n  },\n  error: 'DispatchActivationLinkError' // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  var goodEmailButStubbingToGetAsThoughBad = 'bad@example.name';\n  cy.get('[data-name=\"name\"]').type('MyName');\n  cy.get('[data-name=\"email\"]').type(goodEmailButStubbingToGetAsThoughBad);\n  cy.get('[data-name=\"country\"]').select('GB');\n  cy.get('[data-name=\"user\"]').type('OkUserName');\n  cy.get('[data-name=\"pass\"]').type('okPassword1234');\n  cy.get('[data-name=\"pass-confirm\"]').type('okPassword1234');\n  cy.get('[data-name=account-form] [data-name=action2]').click();\n  cy.get('[data-name=modal-alert] [data-name=ok]').click({\n    timeout: 50000\n  });\n  cy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('There was an error sending out your activation link.');\n  cy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('If you did enter a valid email'); // Still gets added as just had trouble sending email out\n  return cy.task('getRecords'); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (accts) {\n  expect(accts).to.have.lengthOf(1);\n  return expect(accts[0].user).to.equal('OkUserName');\n});",
              "err": {},
              "uuid": "f830d6b7-7d94-469b-a05b-3ddbdadb2e15",
              "parentUUID": "5b236317-c8fc-450a-8f91-1ab93089cb3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Signup and submit",
              "fullTitle": "Signup Visit Signup and submit",
              "timedOut": null,
              "duration": 67449,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(100000);\ncy.task('deleteEmails', null, {\n  timeout: 100000\n});\ncy.visit('/signup');\ncy.get('[data-name=\"name\"]').type('Brett');\ncy.get('[data-name=\"email\"]').type(NL_EMAIL_USER);\ncy.get('[data-name=\"country\"]').select('US');\ncy.get('[data-name=\"user\"]').type('bretto');\ncy.get('[data-name=\"pass\"]').type(NL_EMAIL_PASS);\ncy.get('[data-name=\"pass-confirm\"]').type(NL_EMAIL_PASS);\ncy.get('[data-name=account-form] [data-name=action2]').click();\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').contains('Please check your email for a verification link', {\n  timeout: 50000\n});\ncy.get('[data-name=modal-alert] [data-name=ok]').click();\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/'); // We don't know exactly how long until the email will be delivered\n// eslint-disable-next-line cypress/no-unnecessary-waiting\ncy.wait(15000); // Check that received activation email\nreturn cy.task('hasEmail', {\n  subject: 'Account Activation',\n  html: ['Please click here to activate your account', '<a href=', 'activation?c='] // eslint-disable-next-line promise/prefer-await-to-then\n}, {\n  timeout: 70000\n}).then(function (hasEmail) {\n  // Todo: In full UI testing mode, we could look for the link and\n  //   visit it.\n  return expect(hasEmail).to.be[\"true\"]; // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function () {\n  return cy.task('getRecords', {\n    user: ['bretto']\n  }); // eslint-disable-next-line promise/prefer-await-to-then\n}).then(function (accts) {\n  var _accts$ = accts[0],\n      user = _accts$.user,\n      activated = _accts$.activated;\n  expect(user).to.equal('bretto');\n  expect(activated).to.be[\"false\"];\n  return cy.log(accts);\n});",
              "err": {},
              "uuid": "e1f12ae0-3173-421b-a297-b4bd6f1b41e0",
              "parentUUID": "5b236317-c8fc-450a-8f91-1ab93089cb3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Signup and submit successfully despite having a previous non-activated account",
              "fullTitle": "Signup Visit Signup and submit successfully despite having a previous non-activated account",
              "timedOut": null,
              "duration": 2111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// cy.task('deleteEmails');\ncy.task('addNonActivatedAccount');\ncy.visit('/signup');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\ncy.get('[data-name=\"email\"]').clear().type('me@example.name');\ncy.get('[data-name=\"pass\"]').type('boo123456');\ncy.get('[data-name=\"pass-confirm\"]').type('boo123456');\ncy.get('[data-name=\"name\"]').type('MyName');\ncy.get('[data-name=\"name\"]:invalid').should('have.length', 0);\nvar nonactivatedExistingUser = 'nicky';\ncy.get('[data-name=\"user\"]').type(nonactivatedExistingUser);\ncy.get('[data-name=\"action2\"]').click();\ncy.get('[data-name=modal-alert] [data-name=modal-body] p').should('be.hidden'); // eslint-disable-next-line promise/prefer-await-to-then\nreturn cy.task('getRecords').then(function (accts) {\n  // Will only delete old account once activated\n  expect(accts).to.have.lengthOf(2);\n  var bothInactive = accts.every(function (acct) {\n    return acct.activated === false;\n  });\n  expect(bothInactive).to.be[\"true\"];\n  return expect([accts[0].name, accts[1].name]).to.have.members(['MyName', 'Nicole']);\n});",
              "err": {},
              "uuid": "9a2cff12-fe6d-46de-9000-f413dccd7322",
              "parentUUID": "5b236317-c8fc-450a-8f91-1ab93089cb3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Signup but cancel to be redirected",
              "fullTitle": "Signup Visit Signup but cancel to be redirected",
              "timedOut": null,
              "duration": 672,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/signup');\ncy.get('[data-name=action1]').click();\ncy.location('pathname', {\n  timeout: 10000\n}).should('eq', '/');",
              "err": {},
              "uuid": "fd5c8dfc-4dd7-4918-b9c5-807926f837c3",
              "parentUUID": "5b236317-c8fc-450a-8f91-1ab93089cb3d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a13fc408-178a-4528-b82c-b54b497c76a5",
            "d2180f50-be06-4c0e-a0cb-1d5f860fefbd",
            "4087e41f-9955-4c2f-b078-7248dbd855f2",
            "f830d6b7-7d94-469b-a05b-3ddbdadb2e15",
            "e1f12ae0-3173-421b-a297-b4bd6f1b41e0",
            "9a2cff12-fe6d-46de-9000-f413dccd7322",
            "fd5c8dfc-4dd7-4918-b9c5-807926f837c3"
          ],
          "failures": [
            "6a3e3df2-66b9-4bff-a260-39a8f8354a48"
          ],
          "pending": [],
          "skipped": [],
          "duration": 110563,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "26b26338-f19f-48f5-80c3-95c803d9bc8f",
      "title": "",
      "fullFile": "cypress/integration/users.js",
      "file": "cypress/integration/users.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "10be8899-3894-49c8-90d2-ce90fb22203f",
          "title": "Users",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Visit Users (Empty)",
              "fullTitle": "Users Visit Users (Empty)",
              "timedOut": null,
              "duration": 368,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('deleteAllAccounts');\ncy.visit('/users');",
              "err": {},
              "uuid": "5403c0a7-2b42-4bd5-9151-59e1094a23c4",
              "parentUUID": "10be8899-3894-49c8-90d2-ce90fb22203f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Visit Users (With user)",
              "fullTitle": "Users Visit Users (With user)",
              "timedOut": null,
              "duration": 472,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('deleteAllAccounts');\ncy.task('addAccount');\ncy.task('addNonActivatedAccount');\ncy.task('addAccountWithMissingNameAndCountry');\ncy.visit('/users');\ncy.get('[data-name=users] tr:nth-child(1) td:nth-child(1)').contains('1');\ncy.get('[data-name=users] tr:nth-child(1) td:nth-child(2)').contains('Brett');\ncy.get('[data-name=users] tr:nth-child(1) td:nth-child(3)').contains('bretto');\ncy.get('[data-name=users] tr:nth-child(1) td:nth-child(4)').contains('United States');\ncy.get('[data-name=users] tr:nth-child(1) td:nth-child(5)').contains(/[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{1,2}/);\ncy.get('[data-name=users] tr:nth-child(2) td:nth-child(1)').contains('2');\ncy.get('[data-name=users] tr:nth-child(2) td:nth-child(2)').contains('Nicole');\ncy.get('[data-name=users] tr:nth-child(2) td:nth-child(3)').contains('nicky');\ncy.get('[data-name=users] tr:nth-child(2) td:nth-child(4)').contains('Iran');\ncy.get('[data-name=users] tr:nth-child(2) td:nth-child(5)').contains(/[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{1,2}/);\ncy.get('[data-name=users] tr:nth-child(3) td:nth-child(1)').contains('3');\ncy.get('[data-name=users] tr:nth-child(3) td:nth-child(2)').should('be.empty');\ncy.get('[data-name=users] tr:nth-child(3) td:nth-child(3)').contains('Joe');\ncy.get('[data-name=users] tr:nth-child(3) td:nth-child(4)').should('be.empty');\ncy.get('[data-name=users] tr:nth-child(3) td:nth-child(5)').contains(/[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{1,2}/);\ncy.get('[data-name=users] tbody tr:nth-child(4)').should('not.exist');",
              "err": {},
              "uuid": "62a1c5c8-dda2-4bd4-8ad5-26e9eefbc1e2",
              "parentUUID": "10be8899-3894-49c8-90d2-ce90fb22203f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "users has no detectable a11y violations on load (no users)",
              "fullTitle": "Users users has no detectable a11y violations on load (no users)",
              "timedOut": null,
              "duration": 291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('deleteAllAccounts');\ncy.visitURLAndCheckAccessibility('/users');",
              "err": {},
              "uuid": "97030fd6-4cc0-416e-b21a-40221e39cf03",
              "parentUUID": "10be8899-3894-49c8-90d2-ce90fb22203f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "users has no detectable a11y violations on load",
              "fullTitle": "Users users has no detectable a11y violations on load",
              "timedOut": null,
              "duration": 384,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('deleteAllAccounts');\ncy.task('addAccount');\ncy.task('addNonActivatedAccount');\ncy.visitURLAndCheckAccessibility('/users');",
              "err": {},
              "uuid": "1d351ffe-f597-43e1-9355-3a5f36c6f0ef",
              "parentUUID": "10be8899-3894-49c8-90d2-ce90fb22203f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5403c0a7-2b42-4bd5-9151-59e1094a23c4",
            "62a1c5c8-dda2-4bd4-8ad5-26e9eefbc1e2",
            "97030fd6-4cc0-416e-b21a-40221e39cf03",
            "1d351ffe-f597-43e1-9355-3a5f36c6f0ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1515,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "80502c37-5ea0-44cb-b51f-05e45acf58bd",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "438c71a3-86ef-4419-b847-3786f7f2fd82",
          "title": "CLI",
          "fullFile": "/Users/brett/nogin/test/cli.js",
          "file": "/test/cli.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Null config with non-local scripts and `noBuiltinStylesheets`",
              "fullTitle": "CLI Null config with non-local scripts and `noBuiltinStylesheets`",
              "timedOut": false,
              "duration": 40122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(60000);\nlet cliProm;\n// eslint-disable-next-line promise/avoid-new\nconst {text} = await new Promise((resolve, reject) => {\n  cliProm = spawnPromise(cliPath, [\n    '--noBuiltinStylesheets',\n    '--secret', secret,\n    '--PORT', testPort2,\n    '--config', ''\n  ], 40000, async (stdout) => {\n    // if (stdout.includes(\n    //   `Express server listening on port ${testPort2}`)\n    // ) {\n    if (stdout.includes('Beginning server...')) {\n      try {\n        const res = await fetch(`http://localhost:${testPort2}`);\n        resolve(\n          {text: await res.text()}\n        );\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n});\nconst {stdout, stderr} = await cliProm;\nconst doc = (new JSDOM(text)).window.document;\nconst headLinks = [...doc.querySelectorAll('head link')].map((link) => {\n  return link.outerHTML;\n}).join('');\nexpect(headLinks).to.equal(\n  '<link rel=\"shortcut icon\" type=\"image/x-icon\" ' +\n    'href=\"data:image/x-icon;,\">'\n);\nexpect(stripMongoAndServerListeningMessages(\n  stdout, testPort\n)).to.contain(\n  'Beginning routes...\\n' +\n  'Awaiting internationalization and logging...\\n' +\n  'Awaiting database account connection...\\n' +\n  'Beginning server...\\n'\n);\nexpect(stripPromisesWarning(stderr)).to.equal('');",
              "err": {},
              "uuid": "303294b6-b1d2-4b0b-88f4-30239a01bfc2",
              "parentUUID": "438c71a3-86ef-4419-b847-3786f7f2fd82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "--noLogging option and bad config",
              "fullTitle": "CLI --noLogging option and bad config",
              "timedOut": false,
              "duration": 6353,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  '--localScripts',\n  '--secret', secret,\n  '--noLogging',\n  '--config',\n  'badFile',\n  '--PORT', testPort\n], 20000);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal('');\nexpect(stripPromisesWarning(stderr)).to.equal('');",
              "err": {},
              "uuid": "44d10c3f-5e28-4bf1-b44b-e923f23f93e2",
              "parentUUID": "438c71a3-86ef-4419-b847-3786f7f2fd82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "--noLogging option and null config",
              "fullTitle": "CLI --noLogging option and null config",
              "timedOut": false,
              "duration": 20039,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  '--localScripts',\n  '--secret', secret,\n  '--noLogging',\n  '--config', '',\n  '--PORT', testPort\n], 20000);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal('');\nexpect(stripPromisesWarning(stderr)).to.equal('');",
              "err": {},
              "uuid": "435886c8-14eb-4664-aa2b-24100c753384",
              "parentUUID": "438c71a3-86ef-4419-b847-3786f7f2fd82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Default config",
              "fullTitle": "CLI Default config",
              "timedOut": false,
              "duration": 10250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  '--localScripts',\n  '--secret', secret,\n  '--PORT', testPort\n], 20000);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal('');\nexpect(stripPromisesWarning(stderr)).to.equal(\n  'No config file detected at nogin.json; supply a ' +\n    '`null` `config` to avoid this message.\\n'\n);",
              "err": {},
              "uuid": "4952bff7-f821-426a-94f4-cf141334d596",
              "parentUUID": "438c71a3-86ef-4419-b847-3786f7f2fd82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Null config",
              "fullTitle": "CLI Null config",
              "timedOut": false,
              "duration": 20049,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  '--localScripts',\n  '--secret', secret,\n  '--PORT', testPort,\n  '--config', ''\n], 20000);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.contain(\n  'Beginning routes...\\n' +\n  'Awaiting internationalization and logging...\\n' +\n  'Awaiting database account connection...\\n' +\n  'Beginning server...\\n'\n);\nexpect(stripPromisesWarning(stderr)).to.equal('');",
              "err": {},
              "uuid": "8cd77ace-75df-4d1e-8bd3-c40d291a2c7c",
              "parentUUID": "438c71a3-86ef-4419-b847-3786f7f2fd82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "null config but with a bad `adapter` (passed on to `DBFactory.getURL`)",
              "fullTitle": "CLI null config but with a bad `adapter` (passed on to `DBFactory.getURL`)",
              "timedOut": false,
              "duration": 10205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  '--adapter', 'badAdapter',\n  '--localScripts',\n  '--secret', secret,\n  '--PORT', testPort,\n  '--config', ''\n], 20000);\nexpect(stripPromisesWarning(stderr)).to.contain(\n  'Unrecognized database adapter \"badAdapter\"!'\n);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal('');",
              "err": {},
              "uuid": "87411ec3-b85e-4fd9-a2dc-bd41e879b1e3",
              "parentUUID": "438c71a3-86ef-4419-b847-3786f7f2fd82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Null config with non-local scripts and misc. config",
              "fullTitle": "CLI Null config with non-local scripts and misc. config",
              "timedOut": false,
              "duration": 194690,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(280000);\n// SETUP\n// Adding to ensure there is a fresh `signup` below\nawait removeAccounts({all: true});\nawait deleteEmails();\nlet cliProm, fetching;\nconst [\n  {text, headers}, {json}, {dynamicText},\n  {signupText}, {usersText},\n  {coverageStatus, coverageText},\n  {badURLPostStatus, badURLPostText},\n  {updateAccountText},\n  {homeStatus, homeText},\n  {signupPostStatus}\n  // eslint-disable-next-line promise/avoid-new\n] = await new Promise((resolve, reject) => {\n  cliProm = spawnPromise(cliPath, [\n    '--staticDir', pathResolve(__dirname, './fixtures/'),\n    '--userJS', 'userJS.js',\n    '--userJSModule', 'userJSModule.js',\n    '--stylesheet', 'stylesheet.css',\n    '--favicon', 'favicon.ico',\n    '--countryCodes', '[\"CA\", \"MX\", \"US\"]',\n    '--router', pathResolve(__dirname, './fixtures/router.js'),\n    '--middleware', pathResolve(__dirname, './fixtures/middleware.js'),\n    '--injectHTML', pathResolve(__dirname, './fixtures/injectHTML.js'),\n    '--customRoute', 'en-US=home=/updateAccount',\n    '--customRoute', 'en-US=logout=/log-me-out',\n    '--composeResetPasswordEmailView',\n    './test/fixtures/views/composeResetPasswordEmailView.js',\n    '--composeActivationEmailView',\n    './test/fixtures/views/composeActivationEmailView.js',\n    // These seven are needed for the previous two\n    '--fromText',\n    'brettz9',\n    '--fromURL',\n    'https://github.com/brettz9/nogin',\n    '--NL_EMAIL_FROM',\n    NL_EMAIL_FROM,\n    '--NS_EMAIL_TIMEOUT',\n    NS_EMAIL_TIMEOUT,\n    '--NL_EMAIL_HOST',\n    NL_EMAIL_HOST,\n    '--NL_EMAIL_USER',\n    NL_EMAIL_USER,\n    '--NL_EMAIL_PASS',\n    NL_EMAIL_PASS,\n    // Not sure why not getting coverage error when this was missing\n    '--RATE_LIMIT',\n    1000,\n    '--secret', secret,\n    '--PORT', testPort,\n    '--config', ''\n  ], 180000, async (stdout) => {\n    // if (stdout.includes(\n    //  `Express server listening on port ${testPort}`)\n    // ) {\n    if (fetching || !stdout.includes('Beginning server...')) {\n      return;\n    }\n    fetching = true;\n    try {\n      const [\n        res, staticRes, dynamicRes, signupRes, usersRes,\n        covRes, postRes, updateAccountRes, homeRes,\n        signupPostRes\n      ] = await Promise.all([\n        fetch(`http://localhost:${testPort}`),\n        // Within `/test/fixtures`\n        fetch(`http://localhost:${testPort}/addUsers.json`),\n        // Based on `router`\n        fetch(`http://localhost:${testPort}/dynamic-route`),\n        // Check countryCodes (and lack of `requireName`)\n        fetch(`http://localhost:${testPort}/signup`),\n        // Check missing `--showUsers` flag\n        //   (in main Cypress tests, we are enabling `showUsers`\n        //   and `requireName` so as to fully test them; while\n        //   we would ideally test these in the UI as well,\n        //   a unit test should be adequate given the burden of\n        //   setting up another Cypress instance)\n        fetch(`http://localhost:${testPort}/users`),\n        // Check static coverage\n        fetch(`http://localhost:${testPort}/coverage`),\n        // Check bad POST coverage\n        fetch(`http://localhost:${testPort}/bad-url`, {\n          method: 'POST'\n        }),\n        // Check that `/updateAccount` works as `/home` (redirects)\n        fetch(`http://localhost:${testPort}/updateAccount`),\n        // Check that `/home` is no longer available\n        fetch(`http://localhost:${testPort}/home`),\n        // Check for custom `composeResetPasswordEmailView`\n        fetch(`http://localhost:${testPort}/signup`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: 'Brett',\n            email: NL_EMAIL_USER,\n            user: 'bretto',\n            pass: NL_EMAIL_PASS,\n            country: 'US'\n          })\n        })\n      ]);\n      // Retrieving emails separately\n      const emailsWillHaveProbablyArrived = 15000;\n      await delay(emailsWillHaveProbablyArrived);\n      const hasAccountActivation = await hasEmail({\n        subject: 'Account Activation',\n        html: [\n          'See you later alligator',\n          'Please click here to activate your account',\n          '<a href=',\n          'activation?c='\n        ]\n      });\n      console.log('HAS-EMAIL-RESULT 1');\n      expect(hasAccountActivation).to.be.true;\n      await deleteEmails();\n      console.log('EMAILS DELETED');\n      _373‍.g.console.log('signupPostRes.status', signupPostRes.status);\n      _373‍.g.console.log('signupPostRes', await signupPostRes.text());\n      // So lost password can be requested\n      await updateAccounts({\n        user: ['bretto'],\n        email: [NL_EMAIL_USER],\n        activated: [true]\n      })[0];\n      // Check for custom `composeActivationEmailView`\n      const lostPasswordPostRes = await fetch(\n        `http://localhost:${testPort}/lost-password`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: NL_EMAIL_USER\n          })\n        }\n      );\n      const lostPasswordPostStatus = lostPasswordPostRes.status;\n      expect(lostPasswordPostStatus).to.equal(200);\n      console.log('STATUS RESULT');\n      await delay(emailsWillHaveProbablyArrived);\n      const hasPasswordReset = await hasEmail({\n        subject: 'Password Reset',\n        html: [\n          'See you later alligator',\n          'Click here to reset your password',\n          '<a href=',\n          'reset-password?key='\n        ]\n      });\n      console.log('HAS-EMAIL-RESULT 2');\n      expect(hasPasswordReset).to.be.true;\n      resolve([\n        {headers: res.headers, text: await res.text()},\n        {json: await staticRes.json()},\n        {dynamicText: await dynamicRes.text()},\n        {signupText: await signupRes.text()},\n        {usersText: await usersRes.text()},\n        {\n          coverageStatus: covRes.status,\n          coverageText: await covRes.text()\n        },\n        {\n          badURLPostStatus: postRes.status,\n          badURLPostText: await postRes.text()\n        },\n        {updateAccountText: await updateAccountRes.text()},\n        {homeStatus: homeRes.status, homeText: await homeRes.text()},\n        {\n          signupPostStatus: signupPostRes.status\n        }\n      ]);\n    } catch (err) {\n      reject(err);\n    }\n  });\n});\nconst {stdout, stderr} = await cliProm;\nconst coverageDoc = (new JSDOM(coverageText)).window.document;\nconst covMsg = coverageDoc.querySelector(\n  '[data-name=four04]'\n).textContent;\nexpect(coverageStatus).to.equal(404);\nexpect(covMsg).contains(\n  'the page or resource you are searching for is currently unavailable'\n);\nexpect(signupPostStatus).to.equal(200);\nconst postDoc = (new JSDOM(badURLPostText)).window.document;\nconst postMsg = postDoc.querySelector('[data-name=four04]').textContent;\nexpect(badURLPostStatus).to.equal(404);\nexpect(postMsg).contains(\n  'the page or resource you are searching for is currently unavailable'\n);\nexpect(updateAccountText).to.contain('Please Login To Your Account');\nconst homeDoc = (new JSDOM(homeText)).window.document;\nconst homeMsg = homeDoc.querySelector('[data-name=four04]').textContent;\nexpect(homeStatus).to.equal(404);\nexpect(homeMsg).contains(\n  'the page or resource you are searching for is currently unavailable'\n);\nexpect(headers.get('x-middleware-gets-options')).to.equal('favicon.ico');\nexpect(headers.get('x-middleware-gets-req')).to.equal('/');\nconst doc = (new JSDOM(text)).window.document;\nconst headLinks = [...doc.querySelectorAll('head link')].map((link) => {\n  return link.outerHTML;\n}).join('');\nconst semverNumPattern = '\\\\d+\\\\.\\\\d+\\\\.\\\\d+';\nexpect(headLinks).to.match(new RegExp(\n  escRegex(\n    '<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\">'\n  ) +\n  escRegex(\n    '<link href=\"https://stackpath.bootstrapcdn.com/font-awesome/'\n  ) + semverNumPattern + escRegex(\n    '/css/font-awesome.min.css\" rel=\"stylesheet\" crossorigin=\"anonymous\">'\n  ) +\n  escRegex(\n    '<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/'\n  ) + semverNumPattern + escRegex(\n    '/css/bootstrap.min.css\" crossorigin=\"anonymous\">'\n  ) +\n  escRegex('<link rel=\"stylesheet\" href=\"/css/style.css\">') +\n  escRegex(\n    '<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/github-fork-ribbon-css/'\n  ) + semverNumPattern + escRegex(\n    '/gh-fork-ribbon.min.css\" crossorigin=\"anonymous\">'\n  ) +\n  escRegex(\n    '<link rel=\"stylesheet\" href=\"stylesheet.css\">' +\n    '<link rel=\"stylesheet\" href=\"headPostContent.css\">'\n  ),\n  'u'\n));\nconst headScriptsDOM = [...doc.querySelectorAll('head script')];\nconst headScripts = headScriptsDOM.map(\n  (script) => {\n    return script.outerHTML;\n  }\n);\nconst headPreScripts = headScripts.slice(0, 5).join('');\nexpect(headPreScripts).to.match(new RegExp(\n  escRegex(\n    '<script src=\"headPreContent.js\"></script>' +\n    '<script src=\"https://code.jquery.com/jquery-'\n  ) + semverNumPattern + escRegex(\n    '.min.js\" crossorigin=\"anonymous\" defer=\"\"></script>'\n  ) +\n  escRegex(\n    '<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/'\n  ) + semverNumPattern + escRegex(\n    '/umd/popper.min.js\" crossorigin=\"anonymous\" defer=\"\"></script>'\n  ) +\n  escRegex(\n    '<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/'\n  ) + semverNumPattern + escRegex(\n    '/js/bootstrap.min.js\" crossorigin=\"anonymous\" defer=\"\"></script>'\n  ) +\n  escRegex(\n    '<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery.form/'\n  ) + semverNumPattern + escRegex(\n    '/jquery.form.min.js\" crossorigin=\"anonymous\" defer=\"\"></script>'\n  ),\n  'u'\n));\nconst headPostScripts = headScripts.slice(-2).join('');\nexpect(headPostScripts).to.equal(\n  '<script src=\"userJS.js\"></script>' +\n  '<script type=\"module\" src=\"userJSModule.js\"></script>'\n);\nexpect(headScriptsDOM.some((headScript) => {\n  return headScript.src === '/js/polyfills/polyfills.iife.min.js';\n})).to.be.true;\nexpect(headScriptsDOM.some((headScript) => {\n  return headScript.type === 'module' &&\n    headScript.src === '/js/controllers/loginController.js';\n})).to.be.false;\nexpect(doc.body.firstElementChild.outerHTML).to.equal(\n  '<link rel=\"stylesheet\" href=\"bodyPreContent.css\">'\n);\nexpect(doc.body.lastElementChild.outerHTML).to.equal(\n  '<script src=\"bodyPostContent.js\"></script>'\n);\nexpect(json).to.deep.equal(addUsersJSON);\nexpect(dynamicText).to.equal(\n  'got a dynamic route with options, e.g., userJS.js'\n);\nconst signupDoc = (new JSDOM(signupText)).window.document;\nconst countries = [\n  ...signupDoc.querySelectorAll('[data-name=\"country\"] option')\n].map((country) => {\n  return country.outerHTML;\n}).join('');\nexpect(countries).to.equal(\n  '<option value=\"\">Please select a country</option>' +\n  '<option value=\"CA\">Canada</option>' +\n  '<option value=\"MX\">Mexico</option>' +\n  '<option value=\"US\">United States</option>'\n);\nconst name = signupDoc.querySelector('[data-name=\"name\"]').outerHTML;\nexpect(name).to.not.contain('minlength');\nconst usersDoc = (new JSDOM(usersText)).window.document;\nexpect(\n  usersDoc.querySelector('[data-name=four04]').textContent\n).to.contain(\n  'the page or resource you are searching for is currently unavailable'\n);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.contain(\n  'Beginning routes...\\n' +\n  'Awaiting internationalization and logging...\\n' +\n  'Awaiting database account connection...\\n' +\n  'Beginning server...\\n'\n);\n_373‍.g.console.log('STDOUT:::', stdout);\nexpect(stripPromisesWarning(stderr)).to.equal('');",
              "err": {},
              "uuid": "03feaed9-5262-4f01-8bc7-3a875fd3faae",
              "parentUUID": "438c71a3-86ef-4419-b847-3786f7f2fd82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Missing environment components",
              "fullTitle": "CLI Missing environment components",
              "timedOut": false,
              "duration": 10247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, {\n  env: {\n    // eslint-disable-next-line no-process-env\n    ...process.env,\n    NODE_ENV: 'production'\n  }\n}, [\n  '--localScripts',\n  '--secret', secret,\n  '--PORT', testPort,\n  '--config', ''\n], 20000);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal('');\nexpect(stripPromisesWarning(stderr)).to.equal(\n  'A production environment requires setting `DB_USER` and `DB_PASS`.\\n'\n);",
              "err": {},
              "uuid": "85950308-0675-4532-a996-898e78d11a47",
              "parentUUID": "438c71a3-86ef-4419-b847-3786f7f2fd82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "With environment components",
              "fullTitle": "CLI With environment components",
              "timedOut": false,
              "duration": 20049,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, {\n  env: {\n    // eslint-disable-next-line no-process-env\n    ...process.env,\n    NODE_ENV: 'production'\n  }\n}, [\n  '--localScripts',\n  '--secret', secret,\n  '--PORT', testPort,\n  '--config', '',\n  '--DB_USER', 'brett',\n  '--DB_PASS', '123456'\n], 20000);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal(\n  'Beginning routes...\\n' +\n  'Awaiting internationalization and logging...\\n' +\n  'Awaiting database account connection...\\n'\n);\nexpect(stripPromisesWarning(stderr)).to.equal('');",
              "err": {},
              "uuid": "52630d42-9f2c-4df4-8935-ddf8b8fe96b9",
              "parentUUID": "438c71a3-86ef-4419-b847-3786f7f2fd82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "05940299-21ef-4aff-88ad-2c72a97ba455",
              "title": "Erring with bad locale routes",
              "fullFile": "/Users/brett/nogin/test/cli.js",
              "file": "/test/cli.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Throw with non-distinct route paths",
                  "fullTitle": "CLI Erring with bad locale routes Throw with non-distinct route paths",
                  "timedOut": false,
                  "duration": 20051,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  '--localScripts',\n  '--secret', secret,\n  '--PORT', testPort,\n  '--localesBasePath', 'test/fixtures/locales/non-distinct',\n  '--config', ''\n], 20000);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.contain(\n  'Beginning routes...\\n' +\n  'Awaiting internationalization and logging...\\n'\n);\nexpect(stripPromisesWarning(stderr)).to.contain(\n  'Localized route paths must be distinct within a locale'\n);",
                  "err": {},
                  "uuid": "779b33ce-50bd-4f20-a66f-a25c4b698bf1",
                  "parentUUID": "05940299-21ef-4aff-88ad-2c72a97ba455",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Throw with reserved routes",
                  "fullTitle": "CLI Erring with bad locale routes Throw with reserved routes",
                  "timedOut": false,
                  "duration": 20045,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  '--localScripts',\n  '--secret', secret,\n  '--PORT', testPort,\n  '--localesBasePath', 'test/fixtures/locales/reserved-routes',\n  '--config', ''\n], 20000);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.contain(\n  'Beginning routes...\\n' +\n  'Awaiting internationalization and logging...\\n'\n);\nexpect(stripPromisesWarning(stderr)).to.contain(\n  'Localized routes must not use reserved routes (/_lang)'\n);",
                  "err": {},
                  "uuid": "b05ae5bc-6fb0-4bfd-b3bb-430b8b577a30",
                  "parentUUID": "05940299-21ef-4aff-88ad-2c72a97ba455",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Throw with paths possessing dots",
                  "fullTitle": "CLI Erring with bad locale routes Throw with paths possessing dots",
                  "timedOut": false,
                  "duration": 20048,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  '--localScripts',\n  '--secret', secret,\n  '--PORT', testPort,\n  '--localesBasePath', 'test/fixtures/locales/path-dots',\n  '--config', ''\n], 20000);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.contain(\n  'Beginning routes...\\n' +\n  'Awaiting internationalization and logging...\\n'\n);\nexpect(stripPromisesWarning(stderr)).to.contain(\n  'Localized routes must have an initial slash but no ' +\n    'dots or slashes afterward.'\n);",
                  "err": {},
                  "uuid": "ff83258f-b7d2-4546-b619-df9c68509ff1",
                  "parentUUID": "05940299-21ef-4aff-88ad-2c72a97ba455",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Throw with paths possessing extra slashes",
                  "fullTitle": "CLI Erring with bad locale routes Throw with paths possessing extra slashes",
                  "timedOut": false,
                  "duration": 20045,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  '--localScripts',\n  '--secret', secret,\n  '--PORT', testPort,\n  '--localesBasePath', 'test/fixtures/locales/path-slashes',\n  '--config', ''\n], 20000);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.contain(\n  'Beginning routes...\\n' +\n  'Awaiting internationalization and logging...\\n'\n);\nexpect(stripPromisesWarning(stderr)).to.contain(\n  'Localized routes must have an initial slash but no ' +\n    'dots or slashes afterward.'\n);",
                  "err": {},
                  "uuid": "deb28c51-a1f0-43d2-ae83-f58452ae2c82",
                  "parentUUID": "05940299-21ef-4aff-88ad-2c72a97ba455",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "779b33ce-50bd-4f20-a66f-a25c4b698bf1",
                "b05ae5bc-6fb0-4bfd-b3bb-430b8b577a30",
                "ff83258f-b7d2-4546-b619-df9c68509ff1",
                "deb28c51-a1f0-43d2-ae83-f58452ae2c82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80189,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89bba34f-58e3-44db-af5f-5f13c5f514e9",
              "title": "Help",
              "fullFile": "/Users/brett/nogin/test/cli.js",
              "file": "/test/cli.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "help",
                  "fullTitle": "CLI Help help",
                  "timedOut": false,
                  "duration": 5750,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'help'\n]);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.contain(\n  'nogin [help|(add|create'\n);\nexpect(stripPromisesWarning(stderr)).to.equal('');",
                  "err": {},
                  "uuid": "9c4398a5-cf61-4916-88c0-79d1ae165da0",
                  "parentUUID": "89bba34f-58e3-44db-af5f-5f13c5f514e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "help add",
                  "fullTitle": "CLI Help help add",
                  "timedOut": false,
                  "duration": 5634,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'help',\n  'add'\n]);\nexpect(stripPromisesWarning(stderr)).to.equal('');\nexpect(stripMongoAndServerListeningMessages(stdout)).to.contain(\n  '--userFile path'\n);",
                  "err": {},
                  "uuid": "66a08097-13ee-45dd-9012-c291554c5fc0",
                  "parentUUID": "89bba34f-58e3-44db-af5f-5f13c5f514e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "help create (with explicit locale)",
                  "fullTitle": "CLI Help help create (with explicit locale)",
                  "timedOut": false,
                  "duration": 5810,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'help',\n  'create',\n  '--loggerLocale'\n]);\nexpect(stripPromisesWarning(stderr)).to.equal('');\nexpect(stripMongoAndServerListeningMessages(stdout)).to.contain(\n  '--userFile path'\n);",
                  "err": {},
                  "uuid": "1ae5b465-6b73-4d82-b0ff-06284e5b6d2a",
                  "parentUUID": "89bba34f-58e3-44db-af5f-5f13c5f514e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "help (bad verb)",
                  "fullTitle": "CLI Help help (bad verb)",
                  "timedOut": false,
                  "duration": 5920,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'help',\n  'noSuchVerb'\n]);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal('');\nexpect(stripPromisesWarning(stderr)).to.contain(\n  'Erred TypeError: Unknown verb noSuchVerb'\n);",
                  "err": {},
                  "uuid": "c359b564-4fd6-471b-96a8-06f3a00c4559",
                  "parentUUID": "89bba34f-58e3-44db-af5f-5f13c5f514e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c4398a5-cf61-4916-88c0-79d1ae165da0",
                "66a08097-13ee-45dd-9012-c291554c5fc0",
                "1ae5b465-6b73-4d82-b0ff-06284e5b6d2a",
                "c359b564-4fd6-471b-96a8-06f3a00c4559"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8c1c4f4-34a3-4741-85a5-4ce299694ea0",
              "title": "adding",
              "fullFile": "/Users/brett/nogin/test/cli.js",
              "file": "/test/cli.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "CLI adding \"before each\" hook",
                  "timedOut": false,
                  "duration": 7,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await removeAccounts({all: true});",
                  "err": {},
                  "uuid": "a665d058-d2a1-4dfb-9e05-cf294f39373f",
                  "parentUUID": "a8c1c4f4-34a3-4741-85a5-4ce299694ea0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add",
                  "fullTitle": "CLI adding add",
                  "timedOut": false,
                  "duration": 5735,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'add',\n  '--userFile',\n  'test/fixtures/addUsers.json'\n], 30000);\nexpect(stripPromisesWarning(stderr)).to.equal('');\ntry {\n  expect(stripMongoAndServerListeningMessages(stdout)).to.equal(\n    'Added 2 accounts: brett, coco!\\n'\n  );\n} catch (err) {\n  expect(stripMongoAndServerListeningMessages(stdout)).to.equal(\n    'Added 2 accounts: coco, brett!\\n'\n  );\n}",
                  "err": {},
                  "uuid": "11fbb404-aff5-458c-a5a2-9a87ab7ed5ef",
                  "parentUUID": "a8c1c4f4-34a3-4741-85a5-4ce299694ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add (flags)",
                  "fullTitle": "CLI adding add (flags)",
                  "timedOut": false,
                  "duration": 5741,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'add',\n  '--user',\n  'testUser',\n  '--pass',\n  '123456',\n  '--email',\n  'test@example.name',\n  '--country',\n  'US',\n  '--name',\n  'Joe Bob',\n  '--passVer',\n  '1',\n  '--date',\n  '1234567890',\n  '--activationCode',\n  '1234555555555555',\n  '--unactivatedEmail',\n  'new@example.name',\n  '--activationRequestDate',\n  '1584614124120',\n  '--activated'\n], 30000);\nexpect(stripPromisesWarning(stderr)).to.equal('');\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal(\n  'Added 1 accounts: testUser!\\n'\n);\nconst accts = await readAccounts();\nexpect(accts).to.have.lengthOf(1);\nexpect(accts[0].user).to.equal('testUser');",
                  "err": {},
                  "uuid": "340d3761-0321-4e35-99f2-7bd0f1e53d3b",
                  "parentUUID": "a8c1c4f4-34a3-4741-85a5-4ce299694ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add (flags) and deletes other unactivated accounts",
                  "fullTitle": "CLI adding add (flags) and deletes other unactivated accounts",
                  "timedOut": false,
                  "duration": 5849,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(50000);\nawait addAccounts({\n  user: ['testUser'],\n  email: ['test@example.name'],\n  pass: ['myPass12345'],\n  activated: [false]\n});\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'add',\n  '--user',\n  'testUser',\n  '--pass',\n  '123456',\n  '--email',\n  'test@example.name',\n  '--country',\n  'US',\n  '--name',\n  'Joe Bob',\n  '--passVer',\n  '1',\n  '--date',\n  '1234567890',\n  '--activationCode',\n  '1234555555555555',\n  '--unactivatedEmail',\n  'new@example.name',\n  '--activationRequestDate',\n  '1584614124120',\n  '--activated'\n], 30000);\nexpect(stripPromisesWarning(stderr)).to.equal('');\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal(\n  'Added 1 accounts: testUser!\\n'\n);\nconst accts = await readAccounts();\nexpect(accts).to.have.lengthOf(1);\nexpect(accts[0].user).to.equal('testUser');",
                  "err": {},
                  "uuid": "8632ae4c-2af8-40e9-afa1-2af19db3f4e1",
                  "parentUUID": "a8c1c4f4-34a3-4741-85a5-4ce299694ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add (erring --userFile)",
                  "fullTitle": "CLI adding add (erring --userFile)",
                  "timedOut": false,
                  "duration": 5532,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'add',\n  '--userFile',\n  'nonexistent-file.json'\n], 30000);\nexpect(stripPromisesWarning(stderr)).to.contain(\n  'no such file or directory'\n);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal('');",
                  "err": {},
                  "uuid": "1f9a517d-2adc-465c-afa6-a3e9ce105e09",
                  "parentUUID": "a8c1c4f4-34a3-4741-85a5-4ce299694ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add (erring due to missing pass)",
                  "fullTitle": "CLI adding add (erring due to missing pass)",
                  "timedOut": false,
                  "duration": 5581,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'add',\n  '--user',\n  'testUser'\n], 30000);\nexpect(stripPromisesWarning(stderr)).to.contain(\n  'A `pass` argument must be provided with `user`; ' +\n      'for user \"testUser\" index 0'\n);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal('');",
                  "err": {},
                  "uuid": "b0d76e8d-dbfc-4df1-a32e-ec9cca17e68b",
                  "parentUUID": "a8c1c4f4-34a3-4741-85a5-4ce299694ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add (erring due to missing email)",
                  "fullTitle": "CLI adding add (erring due to missing email)",
                  "timedOut": false,
                  "duration": 5606,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'add',\n  '--user',\n  'testUser',\n  '--pass',\n  '123456'\n], 30000);\nexpect(stripPromisesWarning(stderr)).to.contain(\n  'An `email` argument must be provided with `user`; ' +\n      'for user \"testUser\" index 0'\n);\nexpect(stripMongoAndServerListeningMessages(stdout)).to.equal('');",
                  "err": {},
                  "uuid": "afb23340-3cde-409c-bdf7-a3b4f1174af3",
                  "parentUUID": "a8c1c4f4-34a3-4741-85a5-4ce299694ea0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11fbb404-aff5-458c-a5a2-9a87ab7ed5ef",
                "340d3761-0321-4e35-99f2-7bd0f1e53d3b",
                "8632ae4c-2af8-40e9-afa1-2af19db3f4e1",
                "1f9a517d-2adc-465c-afa6-a3e9ce105e09",
                "b0d76e8d-dbfc-4df1-a32e-ec9cca17e68b",
                "afb23340-3cde-409c-bdf7-a3b4f1174af3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34044,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8742df7e-f001-41cf-b7ee-7589a2168eee",
              "title": "Read, listIndexes, update, delete existing",
              "fullFile": "/Users/brett/nogin/test/cli.js",
              "file": "/test/cli.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "CLI Read, listIndexes, update, delete existing \"before each\" hook",
                  "timedOut": false,
                  "duration": 42,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await removeAccounts({all: true});\n// Todo: Note that this JSON file wouldn't work if we needed to\n//  test against a working (and private) email as we do for login tests\nawait addAccounts({userFile: ['test/fixtures/addUsers.json']});",
                  "err": {},
                  "uuid": "ac90c369-4b89-4648-85ae-8c36d62cdeb7",
                  "parentUUID": "8742df7e-f001-41cf-b7ee-7589a2168eee",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "read",
                  "fullTitle": "CLI Read, listIndexes, update, delete existing read",
                  "timedOut": false,
                  "duration": 5635,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  prop,\n  '--user',\n  'brett'\n], 30000);\nexpect(stripPromisesWarning(stderr)).to.equal('');\nconst strippedStdout = stripMongoAndServerListeningMessages(stdout);\nconst expectedBeginning = 'Account ';\nconst beginning = strippedStdout.slice(\n  0, expectedBeginning.length\n);\nconst end = JSON.parse(strippedStdout.slice(\n  expectedBeginning.length\n));\nexpect(beginning).to.equal(expectedBeginning);\nexpect(end.user).to.equal('brett');\nexpect(end.email).to.equal('brettz9@example.name');",
                  "err": {},
                  "uuid": "e21b06e6-7acd-4a76-ae0f-576fe97eaa2b",
                  "parentUUID": "8742df7e-f001-41cf-b7ee-7589a2168eee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "view",
                  "fullTitle": "CLI Read, listIndexes, update, delete existing view",
                  "timedOut": false,
                  "duration": 5443,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  prop,\n  '--user',\n  'brett'\n], 30000);\nexpect(stripPromisesWarning(stderr)).to.equal('');\nconst strippedStdout = stripMongoAndServerListeningMessages(stdout);\nconst expectedBeginning = 'Account ';\nconst beginning = strippedStdout.slice(\n  0, expectedBeginning.length\n);\nconst end = JSON.parse(strippedStdout.slice(\n  expectedBeginning.length\n));\nexpect(beginning).to.equal(expectedBeginning);\nexpect(end.user).to.equal('brett');\nexpect(end.email).to.equal('brettz9@example.name');",
                  "err": {},
                  "uuid": "5f9c6b2f-c051-4e6c-8a4a-ef58f2d35148",
                  "parentUUID": "8742df7e-f001-41cf-b7ee-7589a2168eee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "delete",
                  "fullTitle": "CLI Read, listIndexes, update, delete existing delete",
                  "timedOut": false,
                  "duration": 5948,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  prop,\n  '--user',\n  'brett'\n], 30000);\nexpect(stripPromisesWarning(stderr)).to.equal('');\nconst strippedStdout = stripMongoAndServerListeningMessages(stdout);\nconst expected = 'Removed 1 accounts!\\n';\nexpect(strippedStdout).to.equal(expected);\nconst accts = await readAccounts();\nexpect(accts).to.have.lengthOf(1);\nexpect(accts[0].user).to.equal('coco');",
                  "err": {},
                  "uuid": "644f9f1e-b964-493f-b595-4ef5467a0b4f",
                  "parentUUID": "8742df7e-f001-41cf-b7ee-7589a2168eee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "remove",
                  "fullTitle": "CLI Read, listIndexes, update, delete existing remove",
                  "timedOut": false,
                  "duration": 5720,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(40000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  prop,\n  '--user',\n  'brett'\n], 30000);\nexpect(stripPromisesWarning(stderr)).to.equal('');\nconst strippedStdout = stripMongoAndServerListeningMessages(stdout);\nconst expected = 'Removed 1 accounts!\\n';\nexpect(strippedStdout).to.equal(expected);\nconst accts = await readAccounts();\nexpect(accts).to.have.lengthOf(1);\nexpect(accts[0].user).to.equal('coco');",
                  "err": {},
                  "uuid": "324bfe60-7197-47c9-8905-c832e0f4854d",
                  "parentUUID": "8742df7e-f001-41cf-b7ee-7589a2168eee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "listIndexes",
                  "fullTitle": "CLI Read, listIndexes, update, delete existing listIndexes",
                  "timedOut": false,
                  "duration": 5675,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'listIndexes'\n], 20000);\nexpect(stripPromisesWarning(stderr)).to.equal('');\nconst strippedStdout = stripMongoAndServerListeningMessages(stdout);\nexpect(strippedStdout).to.contain(\n  'index: 0 {'\n);",
                  "err": {},
                  "uuid": "2dafcdb4-378c-430c-909d-d1d2b2957581",
                  "parentUUID": "8742df7e-f001-41cf-b7ee-7589a2168eee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "update",
                  "fullTitle": "CLI Read, listIndexes, update, delete existing update",
                  "timedOut": false,
                  "duration": 5675,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(30000);\nconst {stdout, stderr} = await spawnPromise(cliPath, [\n  'update',\n  '--user',\n  'brett',\n  '--email',\n  'bretto@example.name'\n], 20000);\nexpect(stripPromisesWarning(stderr)).to.equal('');\nconst strippedStdout = stripMongoAndServerListeningMessages(stdout);\nconst expected = 'Updated 1 accounts: brett!\\n';\nexpect(strippedStdout).to.equal(expected);\nconst accts = await readAccounts();\nexpect(accts).to.have.lengthOf(2);\ntry {\n  expect(accts[0].user).to.equal('brett');\n  expect(accts[0].email).to.equal('bretto@example.name');\n  expect(accts[1].user).to.equal('coco');\n} catch (err) {\n  expect(accts[1].user).to.equal('brett');\n  expect(accts[1].email).to.equal('bretto@example.name');\n  expect(accts[0].user).to.equal('coco');\n}",
                  "err": {},
                  "uuid": "3037f619-1cd8-42aa-9dfb-38f0b9ad71ce",
                  "parentUUID": "8742df7e-f001-41cf-b7ee-7589a2168eee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e21b06e6-7acd-4a76-ae0f-576fe97eaa2b",
                "5f9c6b2f-c051-4e6c-8a4a-ef58f2d35148",
                "644f9f1e-b964-493f-b595-4ef5467a0b4f",
                "324bfe60-7197-47c9-8905-c832e0f4854d",
                "2dafcdb4-378c-430c-909d-d1d2b2957581",
                "3037f619-1cd8-42aa-9dfb-38f0b9ad71ce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34096,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "303294b6-b1d2-4b0b-88f4-30239a01bfc2",
            "44d10c3f-5e28-4bf1-b44b-e923f23f93e2",
            "435886c8-14eb-4664-aa2b-24100c753384",
            "4952bff7-f821-426a-94f4-cf141334d596",
            "8cd77ace-75df-4d1e-8bd3-c40d291a2c7c",
            "87411ec3-b85e-4fd9-a2dc-bd41e879b1e3",
            "03feaed9-5262-4f01-8bc7-3a875fd3faae",
            "85950308-0675-4532-a996-898e78d11a47",
            "52630d42-9f2c-4df4-8935-ddf8b8fe96b9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 332004,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "71cada7c-d01a-42e5-905c-67896b851ab5",
          "title": "Programmatic",
          "fullFile": "/Users/brett/nogin/test/programmatic.js",
          "file": "/test/programmatic.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "jmlEngine (erring)",
              "fullTitle": "Programmatic jmlEngine (erring)",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// eslint-disable-next-line promise/avoid-new\nreturn new Promise(function (resolve, reject) {\n  // eslint-disable-next-line promise/prefer-await-to-callbacks\n  jmlEngine(join(__dirname, 'fixtures/bad-template.js'), null, (err) => {\n    expect(err).to.be.an('Error');\n    resolve();\n  });\n});",
              "err": {},
              "uuid": "654abf2e-6694-4ac8-aa62-6a856deb0748",
              "parentUUID": "71cada7c-d01a-42e5-905c-67896b851ab5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DBAbstraction",
              "fullTitle": "Programmatic DBAbstraction",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  DBAbstraction.getURL();\n}).to.throw(Error, 'Abstract method');\nexpect(() => {\n  DBAbstraction.getObjectId();\n}).to.throw(Error, 'Abstract method');\nconst dbAbstract = new DBAbstraction({});\nexpect(() => {\n  dbAbstract.connect();\n}).to.throw(Error, 'Abstract method');\nexpect(() => {\n  dbAbstract.getAccounts();\n}).to.throw(Error, 'Abstract method');",
              "err": {},
              "uuid": "51f87c03-2383-4abd-8914-045069a929f8",
              "parentUUID": "71cada7c-d01a-42e5-905c-67896b851ab5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "crypto (nogin)",
              "fullTitle": "Programmatic crypto (nogin)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return expect(\n  cryptoNL.saltAndHash(null)\n).to.be.rejectedWith(Error);",
              "err": {},
              "uuid": "323a2ce0-728a-4496-a7a8-641df650dfe0",
              "parentUUID": "71cada7c-d01a-42e5-905c-67896b851ab5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "8ffa4bc4-7797-4375-a9d8-65083fee3774",
              "title": "addAccounts",
              "fullFile": "/Users/brett/nogin/test/programmatic.js",
              "file": "/test/programmatic.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add (erring due to missing pass)",
                  "fullTitle": "Programmatic addAccounts add (erring due to missing pass)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return expect(\n  addAccounts({user: ['testUser']})\n).to.be.rejectedWith(\n  TypeError,\n  'A `pass` argument must be provided with `user`; ' +\n      'for user \"testUser\" index 0'\n);",
                  "err": {},
                  "uuid": "0aee6195-79ed-4b02-936c-b1826425f155",
                  "parentUUID": "8ffa4bc4-7797-4375-a9d8-65083fee3774",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add (erring due to missing email)",
                  "fullTitle": "Programmatic addAccounts add (erring due to missing email)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return expect(\n  addAccounts({\n    user: ['testUser'],\n    pass: ['123456'],\n    email: []\n  })\n).to.be.rejectedWith(\n  TypeError,\n  'An `email` argument must be provided with `user`; ' +\n      'for user \"testUser\" index 0'\n);",
                  "err": {},
                  "uuid": "88bc7cb8-478c-4637-9c13-80b81031441e",
                  "parentUUID": "8ffa4bc4-7797-4375-a9d8-65083fee3774",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0aee6195-79ed-4b02-936c-b1826425f155",
                "88bc7cb8-478c-4637-9c13-80b81031441e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93656704-d810-4ed1-b71f-02b2bb64a134",
              "title": "validUserPassword",
              "fullFile": "/Users/brett/nogin/test/programmatic.js",
              "file": "/test/programmatic.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Programmatic validUserPassword \"before each\" hook",
                  "timedOut": false,
                  "duration": 35,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await removeAccounts({all: true});\n// Todo: Note that this JSON file wouldn't work if we needed to\n//  test against a working (and private) email as we do for login tests\nawait addAccounts({\n  user: ['brett'],\n  email: ['brettz9@example.name'],\n  pass: ['123456'],\n  activated: [true]\n});\nconsole.log('done before');",
                  "err": {},
                  "uuid": "bb66c6be-cd75-40b4-838d-f36c988f6078",
                  "parentUUID": "93656704-d810-4ed1-b71f-02b2bb64a134",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "throws with bad password",
                  "fullTitle": "Programmatic validUserPassword throws with bad password",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return expect(\n  validUserPassword({\n    user: 'brett',\n    pass: null\n  })\n).to.be.rejectedWith(\n  Error,\n  // From Node\n  'The \"password\" argument must be one of type string, ' +\n    'Buffer, TypedArray, or DataView. Received type object'\n);",
                  "err": {},
                  "uuid": "5e3b1bec-4bef-4f70-9203-6ae078bb57c5",
                  "parentUUID": "93656704-d810-4ed1-b71f-02b2bb64a134",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e3b1bec-4bef-4f70-9203-6ae078bb57c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3dd74bed-8b1d-4026-82a8-fb9a0407da5d",
              "title": "AccountManager",
              "fullFile": "/Users/brett/nogin/test/programmatic.js",
              "file": "/test/programmatic.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "AccountManager with bad `adapter` (passed to `DBFactory.createInstance`)",
                  "fullTitle": "Programmatic AccountManager AccountManager with bad `adapter` (passed to `DBFactory.createInstance`)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => {\n  // eslint-disable-next-line no-new\n  new AccountManager('badAdapter');\n}).to.throw(\n  Error,\n  'Unrecognized database adapter \"badAdapter\"!'\n);",
                  "err": {},
                  "uuid": "07c85dd7-3f4b-468c-b0b0-be369aee9e63",
                  "parentUUID": "3dd74bed-8b1d-4026-82a8-fb9a0407da5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AccountManager with no log",
                  "fullTitle": "Programmatic AccountManager AccountManager with no log",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(30000);\nconst _ = await setI18n({\n  acceptsLanguages: () => ['en-US']\n});\nlet erred = false;\n// Todo: Fix this per https://stackoverflow.com/questions/37372684/mongodb-3-2-authentication-failed\ntry {\n  const am = new AccountManager('mongodb', {\n    DB_URL: DBFactory.getURL(\n      'mongodb',\n      false,\n      {\n        DB_HOST: 'localhost',\n        DB_PORT: 27017,\n        DB_NAME: 'nogin'\n      }\n    ),\n    DB_NAME: 'node_login',\n    _\n  });\n  await am.connect();\n} catch (err) {\n  erred = true;\n}\nexpect(erred).to.be.false;",
                  "err": {},
                  "uuid": "3caeaec0-5e9f-4ee4-ab5d-554632480d30",
                  "parentUUID": "3dd74bed-8b1d-4026-82a8-fb9a0407da5d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07c85dd7-3f4b-468c-b0b0-be369aee9e63",
                "3caeaec0-5e9f-4ee4-ab5d-554632480d30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "654abf2e-6694-4ac8-aa62-6a856deb0748",
            "51f87c03-2383-4abd-8914-045069a929f8",
            "323a2ce0-728a-4496-a7a8-641df650dfe0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true,
        "consoleReporter": "spec"
      },
      "version": "4.1.0"
    }
  }
}